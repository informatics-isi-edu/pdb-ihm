import sys
import json
from deriva.core import get_credential, DerivaServer, BaseCLI
from deriva.core.ermrest_model import Key, Column
import utils

# add scripts for updating vocabs that has nothing to do with mmcif model changes.

acl_bindings = {
  "released_reader": {
    "types": [
      "select"
    ],
    "scope_acl": [
      "https://auth.globus.org/99da042e-64a6-11ea-ad5f-0ef992ed7ca1"
    ],
    "projection": [
      "RID"
    ],
    "projection_type": "nonnull"
  },
  "self_service_group": {
    "types": [
      "update",
      "delete"
    ],
    "scope_acl": [
      "*"
    ],
    "projection": [
      "Owner"
    ],
    "projection_type": "acl"
  },
  "self_service_creator": {
    "types": [
      "update",
      "delete"
    ],
    "scope_acl": [
      "*"
    ],
    "projection": [
      "RCB"
    ],
    "projection_type": "acl"
  }
}

cross_link_partner_rows =[
    {'Name': '1', 'Description': 'The first partner in the crosslink as identified in the ihm_cross_link_restraint table'},
    {'Name': '2', 'Description': 'The second partner in the crosslink as identified in the ihm_cross_link_restraint table'}
]

sub_sample_flag_rows =[
    {'Name': 'Yes', 'Description': 'Ensemble consists of sub samples'},
    {'Name': 'No', 'Description': 'Ensemble does not consist of sub samples'}
]

sub_sampling_type_rows =[
    {'Name': 'random', 'Description': 'sub samples generated by randomly partitioning all structures in the group'},
    {'Name': 'independent', 'Description': 'each sub sample generated in the same fashion but in independent simulations'},
    {'Name': 'other', 'Description': 'other type of sub sampling'}
]

pseudo_site_flag_rows =[
    {'Name': 'Yes', 'Description': 'Crosslink involves a pseudo site'},
    {'Name': 'No', 'Description': 'Crosslink does not involve a pseudo site'}
]

ihm_derived_angle_restraint_group_conditionality_rows =[
    {'Name': 'ALL', 'Description': 'All angles in the group are required to be satisfied'},
    {'Name': 'ANY', 'Description': 'Any one of the angles in the group could be satisfied'}
]

ihm_derived_angle_restraint_restraint_type_rows =[
    {'Name': 'lower bound', 'Description': 'lower bound'},
    {'Name': 'upper bound', 'Description': 'upper bound'},
    {'Name': 'lower and upper bound', 'Description': 'lower and upper bound'},
    {'Name': 'harmonic', 'Description': 'harmonic'}
]

ihm_derived_dihedral_restraint_group_conditionality_rows =[
    {'Name': 'ALL', 'Description': 'All dihedrals in the group are required to be satisfied'},
    {'Name': 'ANY', 'Description': 'Any one of the dihedrals in the group could be satisfied'}
]

ihm_derived_dihedral_restraint_restraint_type_rows =[
    {'Name': 'lower bound', 'Description': 'lower bound'},
    {'Name': 'upper bound', 'Description': 'upper bound'},
    {'Name': 'lower and upper bound', 'Description': 'lower and upper bound'},
    {'Name': 'harmonic', 'Description': 'harmonic'}
]

struct_ref_seq_dif_details_rows =[
        {'Name': 'acetylation', 'Description': 'acetylation'},
        {'Name': 'amidation', 'Description': 'amidation'},
        {'Name': 'chromophore', 'Description': 'chromophore'},
        {'Name': 'cloning artifact', 'Description': 'cloning artifact'},
        {'Name': 'conflict', 'Description': 'conflict'},
        {'Name': 'deletion', 'Description': 'deletion'},
        {'Name': 'engineered mutation', 'Description': 'engineered mutation'},
        {'Name': 'expression tag', 'Description': 'expression tag'},
        {'Name': 'initiating methionine', 'Description': 'initiating methionine'},
        {'Name': 'insertion', 'Description': 'insertion'},
        {'Name': 'linker', 'Description': 'linker'},
        {'Name': 'microheterogeneity', 'Description': 'microheterogeneity'},
        {'Name': 'microheterogeneity/modified residue', 'Description': 'microheterogeneity/modified residue'},
        {'Name': 'modified residue', 'Description': 'modified residue'},
        {'Name': 'variant', 'Description': 'variant'},
    ]
    
struct_ref_db_name_rows =[
        {'Name': 'UNP', 'Description': 'UNIPROT'},
        {'Name': 'GB', 'Description': 'GENBANK'}
    ]

ihm_cross_link_list_linker_type_rows = [
        {'Name': 'CYS', 'Description': 'CYS'},
        {'Name': 'BMSO', 'Description': 'BMSO'},
        {'Name': 'DHSO', 'Description': 'DHSO'},
        {'Name': 'SDA', 'Description': 'SDA'},
        {'Name': 'DSA', 'Description': 'DSA'},
        {'Name': 'BrdU', 'Description': 'BrdU'},
        {'Name': 'LCSDA', 'Description': 'LCSDA'},
        {'Name': 'ADH', 'Description': 'ADH'}
    ]

ihm_dataset_list_data_type_rows = [
    {'Name': 'X-ray diffraction data', 'Description': 'X-ray diffraction data'}
    ]

ihm_dataset_related_db_reference_db_name_rows = [
    {'Name': 'ProXL', 'Description': 'ProXL'}
    ]

ihm_derived_distance_restraint_restraint_type_rows = [
    {'Name': 'harmonic', 'Description': 'harmonic'}
    ]

File_Type_rows = [
    {'Name': 'Pseudo Site Coordinates', 'Table_Name': 'ihm_pseudo_site', 'Description': 'Details of pseudo sites that may be used in restraints or in model representation'},
    {'Name': 'Chemical Crosslinks with Pseudo Sites', 'Table_Name': 'ihm_cross_link_pseudo_site', 'Description': 'Details of pseudo sites involved in crosslinks'},
    {'Name': 'HD Exchange Restraints', 'Table_Name': 'ihm_hdx_restraint', 'Description': 'Details of restraint derived from hydrogen-deuterium exchange experiments'},
    {'Name': 'Angle Restraints Between Molecular Features', 'Table_Name': 'ihm_derived_angle_restraint', 'Description': 'Generic angle restraints between features (atoms, residues, non-polymeric entities, pseudo sites)'},
    {'Name': 'Dihedral Restraints Between Molecular Features', 'Table_Name': 'ihm_derived_dihedral_restraint', 'Description': 'Generic dihedral restraints between features (atoms, residues, non-polymeric entities, pseudo sites)'}
    ]

def main(server_name, catalog_id, credentials):
    server = DerivaServer('https', server_name, credentials)
    catalog = server.connect_ermrest(catalog_id)
    catalog.dcctx['cid'] = "oneoff/model"
    model = catalog.getCatalogModel()
    
    """
    Add the Table_Name column to the Vocab.File_Type table
    """
    utils.create_column_if_not_exist(model, 'Vocab', 'File_Type',
                                     Column.define(
                                        'Table_Name',
                                        builtin_types.text,
                                        nullok=True
                                    ))
    """
    Create the new vocabulary tables
    """
    utils.create_table_if_not_exist(model, 'Vocab', utils.define_Vocab_table('cross_link_partner', 'Identity of the crosslink partner'))
    utils.create_table_if_not_exist(model, 'Vocab', utils.define_Vocab_table('sub_sample_flag', 'Flag for ensembles consisting of sub samples'))
    utils.create_table_if_not_exist(model, 'Vocab', utils.define_Vocab_table('sub_sampling_type', 'Types of sub samples in ensembles'))
    utils.create_table_if_not_exist(model, 'Vocab', utils.define_Vocab_table('pseudo_site_flag', 'Flag for crosslinks involving pseudo sites'))
    utils.create_table_if_not_exist(model, 'Vocab', utils.define_Vocab_table('ihm_derived_angle_restraint_group_conditionality', 'Conditionality of a group of angles restrained together'))
    utils.create_table_if_not_exist(model, 'Vocab', utils.define_Vocab_table('ihm_derived_angle_restraint_restraint_type', 'The type of angle restraint'))
    utils.create_table_if_not_exist(model, 'Vocab', utils.define_Vocab_table('ihm_derived_dihedral_restraint_group_conditionality', 'Conditionality of a group of dihedrals restrained together'))
    utils.create_table_if_not_exist(model, 'Vocab', utils.define_Vocab_table('ihm_derived_dihedral_restraint_restraint_type', 'The type of dihedral restraint'))
    utils.create_table_if_not_exist(model, 'Vocab', utils.define_Vocab_table('struct_ref_seq_dif_details', 'Details about the special aspects of point differences in the alignment of the macromolecular sequence in the integrative model and the sequence in the reference database'))
    utils.create_table_if_not_exist(model, 'Vocab', utils.define_Vocab_table('struct_ref_db_name', 'The name of the database containing reference information'))

    """
    Load data into the new vocabulary tables
    """
    utils.add_rows_to_vocab_table(catalog, 'cross_link_partner', cross_link_partner_rows)
    utils.add_rows_to_vocab_table(catalog, 'sub_sample_flag', sub_sample_flag_rows)
    utils.add_rows_to_vocab_table(catalog, 'sub_sampling_type', sub_sampling_type_rows)
    utils.add_rows_to_vocab_table(catalog, 'pseudo_site_flag', pseudo_site_flag_rows)
    utils.add_rows_to_vocab_table(catalog, 'ihm_derived_angle_restraint_group_conditionality', ihm_derived_angle_restraint_group_conditionality_rows)
    utils.add_rows_to_vocab_table(catalog, 'ihm_derived_angle_restraint_restraint_type', ihm_derived_angle_restraint_restraint_type_rows)
    utils.add_rows_to_vocab_table(catalog, 'ihm_derived_dihedral_restraint_group_conditionality', ihm_derived_dihedral_restraint_group_conditionality_rows)
    utils.add_rows_to_vocab_table(catalog, 'ihm_derived_dihedral_restraint_restraint_type', ihm_derived_dihedral_restraint_restraint_type_rows)
    utils.add_rows_to_vocab_table(catalog, 'struct_ref_seq_dif_details', struct_ref_seq_dif_details_rows)
    utils.add_rows_to_vocab_table(catalog, 'struct_ref_db_name', struct_ref_db_name_rows)

    """
    Load data into existing vocabulary tables
    """
    utils.add_rows_to_vocab_table(catalog, 'ihm_cross_link_list_linker_type', ihm_cross_link_list_linker_type_rows)
    utils.add_rows_to_vocab_table(catalog, 'ihm_dataset_list_data_type', ihm_dataset_list_data_type_rows)
    utils.add_rows_to_vocab_table(catalog, 'ihm_dataset_related_db_reference_db_name', ihm_dataset_related_db_reference_db_name_rows)
    utils.add_rows_to_vocab_table(catalog, 'ihm_derived_distance_restraint_restraint_type', ihm_derived_distance_restraint_restraint_type_rows)
    utils.add_rows_to_vocab_table(catalog, 'File_Type', File_Type_rows)

    """
    Create the acls bindings
    """
    utils.set_table_acl_bindings(catalog, 'Vocab', 'cross_link_partner', acl_bindings)
    utils.set_table_acl_bindings(catalog, 'Vocab', 'sub_sample_flag', acl_bindings)
    utils.set_table_acl_bindings(catalog, 'Vocab', 'sub_sampling_type', acl_bindings)
    utils.set_table_acl_bindings(catalog, 'Vocab', 'pseudo_site_flag', acl_bindings)
    utils.set_table_acl_bindings(catalog, 'Vocab', 'ihm_derived_angle_restraint_group_conditionality', acl_bindings)
    utils.set_table_acl_bindings(catalog, 'Vocab', 'ihm_derived_angle_restraint_restraint_type', acl_bindings)
    utils.set_table_acl_bindings(catalog, 'Vocab', 'ihm_derived_dihedral_restraint_group_conditionality', acl_bindings)
    utils.set_table_acl_bindings(catalog, 'Vocab', 'ihm_derived_dihedral_restraint_restraint_type', acl_bindings)
    utils.set_table_acl_bindings(catalog, 'Vocab', 'struct_ref_seq_dif_details', acl_bindings)
    utils.set_table_acl_bindings(catalog, 'Vocab', 'struct_ref_db_name', acl_bindings)

if __name__ == '__main__':
    args = BaseCLI("ad-hoc table creation tool", None, 1).parse_cli()
    credentials = get_credential(args.host, args.credential_file)

    main(args.host, 99, credentials)
    
