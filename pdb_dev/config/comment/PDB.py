from deriva.core import DerivaServer, get_credential, BaseCLI
from deriva.core.ermrest_model import Table, Column, Key, ForeignKey, builtin_types

def table_comments(model):
    #table = model.table("PDB", "software")
    #table.comment = "List of software used in the modeling"
    #table.column_definitions["Species_Tested_In"].comment = None

    model.table("PDB", "software").comment = "List of software used in the modeling"
    model.table("PDB", "citation_author").comment = "Authors associated with citations in the citation list"
    model.table("PDB", "chem_comp").comment = "Chemical components including monomers and ligands"
    model.table("PDB", "chem_comp_atom").comment = "Details of atoms in chemical components"
    model.table("PDB", "entity_poly_seq").comment = "Sequence of monomers in polymeric entities"
    model.table("PDB", "entity_src_gen").comment = "Details of the source from which genetically manipulated entities are obtained"
    model.table("PDB", "entity_name_com").comment = "Common names associated with the entities"
    model.table("PDB", "struct_asym").comment = "Instances of entities, both polymeric and non-polymeric"
    model.table("PDB", "atom_type").comment = "Types of atoms in the structure"
    model.table("PDB", "entity").comment = "Details of molecular entities in the structure"
    model.table("PDB", "entity_poly").comment = "Details of polymeric entities"
    model.table("PDB", "entity_name_sys").comment = "Systematic names associated with the entities"
    model.table("PDB", "pdbx_entity_nonpoly").comment = "Details of non-polymeric entities"
    model.table("PDB", "ihm_struct_assembly_details").comment = "Details of structural assemblies in the models submitted"
    model.table("PDB", "ihm_model_representation").comment = "List of model representations used"
    model.table("PDB", "ihm_struct_assembly").comment = "List of structure assemblies in the models submitted"
    model.table("PDB", "ihm_model_representation_details").comment = "Details of model representations used; addresses representations of multi-scale models with atomic and coarse-grained representations"
    model.table("PDB", "ihm_entity_poly_segment").comment = "Segments of polymeric entities; specifies sequence ranges for use in other tables"
    model.table("PDB", "ihm_struct_assembly_class").comment = "List of structural assembly classes; allows for defining hierarchical structural assemblies"
    model.table("PDB", "ihm_struct_assembly_class_link").comment = "Table to link structural assemblies to the assembly classes"
    model.table("PDB", "Entry_Related_File").comment = "Restraint data files (in csv/tsv format) related to the entry"
    model.table("PDB", "Entry_mmCIF_File").comment = "Details of the mmCIF file generated based on all the data provided by the user"
    model.table("PDB", "ihm_dataset_group_link").comment = "Table to link input datasets with the dataset groups"
    model.table("PDB", "ihm_cross_link_restraint").comment = "Chemical crosslinking restraints used in the modeling"
    model.table("PDB", "ihm_poly_atom_feature").comment = "Details of atomic features in polymeric entities"
    model.table("PDB", "ihm_modeling_protocol").comment = "List of modeling protocols used in the integrative modeling study"
    model.table("PDB", "ihm_modeling_protocol_details").comment = "Details of the modeling protocols used in the integrative modeling study"
    model.table("PDB", "ihm_modeling_post_process").comment = "Post processing of the resulting models from the modeling protocols"
    model.table("PDB", "ihm_model_group").comment = "Collections or groups of models that can be used for defining clusters, multi-state models or ordered ensembles"
    model.table("PDB", "ihm_model_group_link").comment = "List of models belonging to a model group"
    model.table("PDB", "ihm_cross_link_result").comment = "Results of crosslinking restraints used in integrative modeling"
    model.table("PDB", "ihm_multi_state_model_group_link").comment = "List of model groups belonging to a particular state"
    model.table("PDB", "ihm_starting_model_details").comment = "Information regarding starting structural models used in the integrative modeling study"
    model.table("PDB", "ihm_starting_comparative_models").comment = "Additional information regarding comparative models used as starting structural models"
    model.table("PDB", "ihm_starting_computational_models").comment = "Generic information regarding all computational models used as starting structural models"
    model.table("PDB", "ihm_starting_model_seq_dif").comment = "Information regarding point mutations in the sequences of the starting models compared to the starting model in the reference database"
    

def column_comments(model):
    
    model.table("PDB", "software").column_definitions["citation_id"].comment = "Citation corresponding to the software; a reference to the citation id in the citation table"
    model.table("PDB", "Entry_Related_File").column_definitions["File_Type"].comment = "Restraint table corresponding to the uploaded file"
    model.table("PDB", "Entry_Related_File").column_definitions["File_Format"].comment = "CSV or TSV file format"
    model.table("PDB", "Entry_Related_File").column_definitions["File_URL"].comment = "URL of the uploaded file"
    model.table("PDB", "Entry_Related_File").column_definitions["Description"].comment = "Description of the file"
    model.table("PDB", "Entry_Related_File").column_definitions["Workflow_Status"].comment = "Workflow status corresponding to uploading restraint data files"
    model.table("PDB", "Entry_Related_File").column_definitions["Record_Status_Detail"].comment = "Captures error messages obtained while processing the uploaded restraint data files; remains empty if process is success"
    model.table("PDB", "Entry_Related_File").column_definitions["File_Bytes"].comment = "Size of the uploaded file in bytes"
    model.table("PDB", "Entry_Related_File").column_definitions["File_MD5"].comment = "MD5 value of the uploaded file"
    model.table("PDB", "Entry_Related_File").column_definitions["structure_id"].comment = "A reference to the entry.id identifier in the entry table"
    model.table("PDB", "entry").column_definitions["Image_File_URL"].comment = "URL of the uploaded image file"
    model.table("PDB", "entry").column_definitions["Image_File_Bytes"].comment = "Size of the uploaded image file in bytes"
    model.table("PDB", "entry").column_definitions["mmCIF_File_URL"].comment = "URL of the uploaded mmCIF file"
    model.table("PDB", "entry").column_definitions["mmCIF_File_Bytes"].comment = "Size of the uploaded mmCIF file in bytes"
    model.table("PDB", "entry").column_definitions["Workflow_Status"].comment = "Workflow status corresponding to the entry"
    model.table("PDB", "entry").column_definitions["accession_code"].comment = "Accession code issued by the archive after processing the entry"
    model.table("PDB", "entry").column_definitions["Record_Status_Detail"].comment = "Captures error messages obtained while processing the uploaded mmCIF files; remain empty if process is success"
    model.table("PDB", "entry").column_definitions["Generated_mmCIF_Processing_Status"].comment = "Indicates whether the status of processing the uploaded mmCIF file is success or failure"
    model.table("PDB", "Entry_mmCIF_File").column_definitions["File_URL"].comment = "URL of the system generated mmCIF file"
    model.table("PDB", "Entry_mmCIF_File").column_definitions["mmCIF_Schema_Version"].comment = "Schema version of mmCIF IHM extension dictionary"
    model.table("PDB", "Entry_mmCIF_File").column_definitions["Structure_Id"].comment = "A reference to the entry.id identifier in the entry table"
    model.table("PDB", "Entry_mmCIF_File").column_definitions["File_Bytes"].comment = "Size of the system generated mmCIF file in bytes"
    model.table("PDB", "Entry_mmCIF_File").column_definitions["File_MD5"].comment = "MD5 value of the system generated mmCIF file"


def set_column_comments(model):
    model.table("PDB", "Entry_mmCIF_File").column_definitions["File_URL"].comment = "- Description: URL of the system generated mmCIF file"
    model.table("PDB", "Entry_mmCIF_File").column_definitions["File_MD5"].comment = "- Description: MD5 value of the system generated mmCIF file"
    model.table("PDB", "Entry_mmCIF_File").column_definitions["File_Bytes"].comment = "- Description: Size of the system generated mmCIF file in bytes"
    model.table("PDB", "Entry_mmCIF_File").column_definitions["Owner"].comment = "- Description: Group that can update the record."
    model.table("PDB", "Entry_mmCIF_File").column_definitions["Structure_Id"].comment = "- Description: A reference to the entry.id identifier in the entry table"
    model.table("PDB", "Entry_mmCIF_File").column_definitions["mmCIF_Schema_Version"].comment = "- Description: Schema version of mmCIF IHM extension dictionary"

    model.table("PDB", "Entry_Related_File").column_definitions["File_Type"].comment = "- Description: Restraint table corresponding to the uploaded file"
    model.table("PDB", "Entry_Related_File").column_definitions["File_Format"].comment = "- Description: CSV or TSV file format"
    model.table("PDB", "Entry_Related_File").column_definitions["File_URL"].comment = "- Description: URL of the uploaded file"
    model.table("PDB", "Entry_Related_File").column_definitions["File_MD5"].comment = "- Description: MD5 value of the uploaded file"
    model.table("PDB", "Entry_Related_File").column_definitions["File_Bytes"].comment = "- Description: Size of the uploaded file in bytes"
    model.table("PDB", "Entry_Related_File").column_definitions["Workflow_Status"].comment = "- Description: Workflow status corresponding to uploading restraint data files"
    model.table("PDB", "Entry_Related_File").column_definitions["Record_Status_Detail"].comment = "- Description: Captures error messages obtained while processing the uploaded restraint data files; remains empty if process is success"
    model.table("PDB", "Entry_Related_File").column_definitions["Owner"].comment = "- Description: Group that can update the record."
    model.table("PDB", "Entry_Related_File").column_definitions["structure_id"].comment = "- Description: A reference to the entry.id identifier in the entry table"
    model.table("PDB", "Entry_Related_File").column_definitions["Description"].comment = "- Description: Description of the file"

    model.table("PDB", "citation_author").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "citation_author").column_definitions["citation_id"].comment = "- Description: A reference to table citation.id."
    model.table("PDB", "citation_author").column_definitions["name"].comment = "- Description: Name of an author of the citation; relevant for journal\n articles, books and book chapters.\n The family name(s), followed by a comma and including any\n dynastic components, precedes the first name(s) or initial(s).\n- Examples: Jones, T.J.,Bleary, Percival R.,O'Neil, F.K.,Van den Bossche, G.,Yang, D.-L.,Simonov, Yu.A\n- Type: text"
    model.table("PDB", "citation_author").column_definitions["ordinal"].comment = "- Description: This data item defines the order of the author's name in the\n list of authors of a citation.\n- Type: int4"
    model.table("PDB", "citation_author").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "struct").column_definitions["entry_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "struct").column_definitions["pdbx_CASP_flag"].comment = "- Description: The item indicates whether the entry is a CASP target, a CASD-NMR target,\n or similar target participating in methods development experiments.\n- Examples: Y\n- Type: text"
    model.table("PDB", "struct").column_definitions["pdbx_descriptor"].comment = "- Description: An automatically generated descriptor for an NDB structure or\n the unstructured content of the PDB COMPND record.\n- Examples: 5'-D(*CP*GP*CP*(HYD)AP*AP*AP*TP*TP*TP*GP*CP*G)-3'\n- Type: text"
    model.table("PDB", "struct").column_definitions["pdbx_details"].comment = "- Description: Additional remarks related to this structure deposition that have not\nbeen included in details data items elsewhere.\n- Examples: Hydrogen bonds between peptide chains follow the Rich and Crick\nmodel II for collagen.\n- Type: text"
    model.table("PDB", "struct").column_definitions["pdbx_model_details"].comment = "- Description: Text description of the methodology which produced this\n model structure.\n- Examples: This model was produced from a 10 nanosecond Amber/MD simulation\nstarting from PDB structure ID 1ABC.\n- Type: text"
    model.table("PDB", "struct").column_definitions["pdbx_model_type_details"].comment = "- Description: A description of the type of structure model.\n- Examples: MINIMIZED AVERAGE\n- Type: text"
    model.table("PDB", "struct").column_definitions["title"].comment = "- Description: A title for the data block. The author should attempt to convey\n the essence of the structure archived in the CIF in the title,\n and to distinguish this structural result from others.\n- Examples: T4 lysozyme mutant - S32A,5'-D(*(I)CP*CP*GP*G)-3,T4 lysozyme mutant - S32A,hen egg white lysozyme at -30 degrees C,quail egg white lysozyme at 2 atmospheres\n- Type: text"
    model.table("PDB", "struct").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "audit_author").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "audit_author").column_definitions["name"].comment = "- Description: The name of an author of this data block. If there are multiple\n authors, _audit_author.name is looped with _audit_author.address.\n The family name(s), followed by a comma and including any\n dynastic components, precedes the first name(s) or initial(s).\n- Examples: Jones, T.J.,Bleary, Percival R.,O'Neil, F.K.,Van den Bossche, G.,Yang, D.-L.,Simonov, Yu.A\n- Type: text"
    model.table("PDB", "audit_author").column_definitions["pdbx_ordinal"].comment = "- Description: This data item defines the order of the author's name in the\n list of audit authors.\n- Examples: 1,2,3\n- Type: int4"
    model.table("PDB", "audit_author").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "software").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "software").column_definitions["citation_id"].comment = "- Description: Citation corresponding to the software; a reference to the citation id in the citation table"
    model.table("PDB", "software").column_definitions["classification"].comment = "- Description: The classification of the program according to its\n major function.\n- Examples: data collection,data reduction,phasing,model building,refinement,validation,other\n- Type: text"
    model.table("PDB", "software").column_definitions["description"].comment = "- Description: Description of the software.\n- Examples: Uses method of restrained least squares\n- Type: text"
    model.table("PDB", "software").column_definitions["location"].comment = "- Description: The URL for an Internet address at which\n details of the software can be found.\n- Examples: http://rosebud.sdsc.edu/projects/pb/IUCr/software.html,ftp://ftp.sdsc.edu/pub/sdsc/biology/\n- Type: text"
    model.table("PDB", "software").column_definitions["name"].comment = "- Description: The name of the software.\n- Examples: Merlot,O,Xengen,X-plor\n- Type: text"
    model.table("PDB", "software").column_definitions["pdbx_ordinal"].comment = "- Description: An ordinal index for this category\n- Examples: 1,2\n- Type: int4"
    model.table("PDB", "software").column_definitions["type"].comment = "- Description: The classification of the software according to the most\n common types.\n- Type: text"
    model.table("PDB", "software").column_definitions["version"].comment = "- Description: The version of the software.\n- Examples: v1.0,beta,3.1-2,unknown\n- Type: text"
    model.table("PDB", "software").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "entry").column_definitions["id"].comment = "- Description: The value of _entry.id identifies the data block.\n Note that this item need not be a number; it can be any unique\n identifier.\n- Type: text"
    model.table("PDB", "entry").column_definitions["Owner"].comment = "- Description: Group that can update the record."
    model.table("PDB", "entry").column_definitions["Image_File_URL"].comment = "- Description: URL of the uploaded image file"
    model.table("PDB", "entry").column_definitions["Image_File_Bytes"].comment = "- Description: Size of the uploaded image file in bytes"
    model.table("PDB", "entry").column_definitions["mmCIF_File_URL"].comment = "- Description: URL of the uploaded mmCIF file"
    model.table("PDB", "entry").column_definitions["mmCIF_File_Bytes"].comment = "- Description: Size of the uploaded mmCIF file in bytes"
    model.table("PDB", "entry").column_definitions["Workflow_Status"].comment = "- Description: Workflow status corresponding to the entry"
    model.table("PDB", "entry").column_definitions["Record_Status_Detail"].comment = "- Description: Captures error messages obtained while processing the uploaded mmCIF files; remain empty if process is success"
    model.table("PDB", "entry").column_definitions["accession_code"].comment = "- Description: Accession code issued by the archive after processing the entry"
    model.table("PDB", "entry").column_definitions["Generated_mmCIF_Processing_Status"].comment = "- Description: Indicates whether the status of processing the uploaded mmCIF file is success or failure"

    model.table("PDB", "citation").column_definitions["structure_id"].comment = "- Description: - Description: A reference to table entry.id."
    model.table("PDB", "citation").column_definitions["country"].comment = "- Description: - Description: The country/region of publication; relevant for books\n and book chapters.\n- Type: text"
    model.table("PDB", "citation").column_definitions["id"].comment = "- Description: - Description: The value of _citation.id must uniquely identify a record in the\n CITATION list.\n The _citation.id 'primary' should be used to indicate the\n citation that the author(s) consider to be the most pertinent to\n the contents of the data block.\n Note that this item need not be a number; it can be any unique\n identifier.\n- Examples: primary,1,2\n- Type: text"
    model.table("PDB", "citation").column_definitions["journal_abbrev"].comment = "- Description: - Description: Abbreviated name of the cited journal as given in the\n Chemical Abstracts Service Source Index.\n- Examples: J.Mol.Biol.,J. Mol. Biol.\n- Type: text"
    model.table("PDB", "citation").column_definitions["journal_id_ASTM"].comment = "- Description: - Description: The American Society for Testing and Materials (ASTM) code\n assigned to the journal cited (also referred to as the CODEN\n designator of the Chemical Abstracts Service); relevant for\n journal articles.\n- Type: text"
    model.table("PDB", "citation").column_definitions["journal_id_CSD"].comment = "- Description: - Description: The Cambridge Structural Database (CSD) code assigned to the\n journal cited; relevant for journal articles. This is also the\n system used at the Protein Data Bank (PDB).\n- Examples: 0070\n- Type: text"
    model.table("PDB", "citation").column_definitions["journal_id_ISSN"].comment = "- Description: - Description: The International Standard Serial Number (ISSN) code assigned to\n the journal cited; relevant for journal articles.\n- Type: text"
    model.table("PDB", "citation").column_definitions["journal_issue"].comment = "- Description: - Description: Issue number of the journal cited; relevant for journal\n articles.\n- Examples: 2\n- Type: text"
    model.table("PDB", "citation").column_definitions["journal_volume"].comment = "- Description: - Description: Volume number of the journal cited; relevant for journal\n articles.\n- Examples: 174\n- Type: text"
    model.table("PDB", "citation").column_definitions["page_first"].comment = "- Description: - Description: The first page of the citation; relevant for journal\n articles, books and book chapters.\n- Type: text"
    model.table("PDB", "citation").column_definitions["page_last"].comment = "- Description: - Description: The last page of the citation; relevant for journal\n articles, books and book chapters.\n- Type: text"
    model.table("PDB", "citation").column_definitions["pdbx_database_id_DOI"].comment = "- Description: - Description: Document Object Identifier used by doi.org to uniquely\n specify bibliographic entry.\n- Examples: 10.2345/S1384107697000225\n- Type: text"
    model.table("PDB", "citation").column_definitions["pdbx_database_id_PubMed"].comment = "- Description: - Description: Ascession number used by PubMed to categorize a specific\n bibliographic entry.\n- Examples: 12627512\n- Type: int4"
    model.table("PDB", "citation").column_definitions["title"].comment = "- Description: - Description: The title of the citation; relevant for journal articles, books\n and book chapters.\n- Examples: Structure of diferric duck ovotransferrin\n                                  at 2.35 Angstroms resolution.\n- Type: text"
    model.table("PDB", "citation").column_definitions["year"].comment = "- Description: - Description: The year of the citation; relevant for journal articles, books\n and book chapters.\n- Examples: 1984\n- Type: int4"
    model.table("PDB", "citation").column_definitions["Owner"].comment = "- Description: - Description: Group that can update the record."

    model.table("PDB", "ihm_dataset_related_db_reference").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_dataset_related_db_reference").column_definitions["accession_code"].comment = "- Description: The accession code for the database entry.\n- Examples: 5FM1,25766,EMD-2799,10049,SASDA82,PXD003381,MA-CO2KC\n- Type: text"
    model.table("PDB", "ihm_dataset_related_db_reference").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_dataset_related_db_reference").column_definitions["db_name"].comment = "- Description: The name of the database containing the dataset entry.\n- Type: text"
    model.table("PDB", "ihm_dataset_related_db_reference").column_definitions["details"].comment = "- Description: Details regarding the dataset entry.\n- Examples: Structural Analysis of a Prokaryotic Ribosome Using a Novel Amidinating Cross-Linker and Mass Spectrometry\n- Type: text"
    model.table("PDB", "ihm_dataset_related_db_reference").column_definitions["id"].comment = "- Description: A unique identifier for the related database entry.\n- Type: int4"
    model.table("PDB", "ihm_dataset_related_db_reference").column_definitions["version"].comment = "- Description: Version of the database entry, if the database allows versioning.\n- Type: text"
    model.table("PDB", "ihm_dataset_related_db_reference").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_geometric_object_axis").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_geometric_object_axis").column_definitions["axis_type"].comment = "- Description: The type of axis.\n- Type: text"
    model.table("PDB", "ihm_geometric_object_axis").column_definitions["object_id"].comment = "- Description: A reference to table ihm_geometric_object_list.object_id."
    model.table("PDB", "ihm_geometric_object_axis").column_definitions["transformation_id"].comment = "- Description: A reference to table ihm_geometric_object_transformation.id."
    model.table("PDB", "ihm_geometric_object_axis").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_non_poly_feature").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_non_poly_feature").column_definitions["asym_id"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_non_poly_feature").column_definitions["atom_id"].comment = "- Description: The identifier of the non-polymeric atom, if applicable. \n This data item is a pointer to _chem_comp_atom.atom_id in the CHEM_COMP_ATOM category.\n- Type: text"
    model.table("PDB", "ihm_non_poly_feature").column_definitions["comp_id"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "ihm_non_poly_feature").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_non_poly_feature").column_definitions["feature_id"].comment = "- Description: A reference to table ihm_feature_list.feature_id."
    model.table("PDB", "ihm_non_poly_feature").column_definitions["ordinal_id"].comment = "- Description: A unique identifier for the category.\n- Type: int4"
    model.table("PDB", "ihm_non_poly_feature").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_geometric_object_half_torus").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_geometric_object_half_torus").column_definitions["object_id"].comment = "- Description: A reference to table ihm_geometric_object_list.object_id."
    model.table("PDB", "ihm_geometric_object_half_torus").column_definitions["section"].comment = "- Description: The section of the torus representing the half-torus.\n- Type: text"
    model.table("PDB", "ihm_geometric_object_half_torus").column_definitions["thickness_th"].comment = "- Description: Thickness \"th\" of the half-torus.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_half_torus").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "pdbx_protein_info").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "pdbx_protein_info").column_definitions["id"].comment = "- Description: Serial number.\n- Type: text"
    model.table("PDB", "pdbx_protein_info").column_definitions["name"].comment = "- Description: Name of protein.\n- Type: text"
    model.table("PDB", "pdbx_protein_info").column_definitions["num_per_asym_unit"].comment = "- Description: Number of protein molecules per asymmetric unit.\n- Type: int4"
    model.table("PDB", "pdbx_protein_info").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_geometric_object_torus").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_geometric_object_torus").column_definitions["center_id"].comment = "- Description: A reference to table ihm_geometric_object_center.id."
    model.table("PDB", "ihm_geometric_object_torus").column_definitions["major_radius_R"].comment = "- Description: Major radius \"R\" of the torus.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_torus").column_definitions["minor_radius_r"].comment = "- Description: Minor radius \"r\" of the torus.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_torus").column_definitions["object_id"].comment = "- Description: A reference to table ihm_geometric_object_list.object_id."
    model.table("PDB", "ihm_geometric_object_torus").column_definitions["transformation_id"].comment = "- Description: A reference to table ihm_geometric_object_transformation.id."
    model.table("PDB", "ihm_geometric_object_torus").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_pseudo_site_feature").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_pseudo_site_feature").column_definitions["Cartn_x"].comment = "- Description: The Cartesian X component corresponding to this pseudo site.\n- Type: float4"
    model.table("PDB", "ihm_pseudo_site_feature").column_definitions["Cartn_y"].comment = "- Description: The Cartesian Y component corresponding to this pseudo site.\n- Type: float4"
    model.table("PDB", "ihm_pseudo_site_feature").column_definitions["Cartn_z"].comment = "- Description: The Cartesian Z component corresponding to this pseudo site.\n- Type: float4"
    model.table("PDB", "ihm_pseudo_site_feature").column_definitions["description"].comment = "- Description: Textual description of the pseudo site representing the specific feature.\n- Examples: centroid of the feature\n- Type: text"
    model.table("PDB", "ihm_pseudo_site_feature").column_definitions["feature_id"].comment = "- Description: A reference to table ihm_feature_list.feature_id."
    model.table("PDB", "ihm_pseudo_site_feature").column_definitions["radius"].comment = "- Description: The radius associated with the feature at this position, if applicable.\n- Type: float4"
    model.table("PDB", "ihm_pseudo_site_feature").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_cross_link_result_parameters").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_cross_link_result_parameters").column_definitions["id"].comment = "- Description: A unique identifier for the restraint/model combination.\n- Type: int4"
    model.table("PDB", "ihm_cross_link_result_parameters").column_definitions["model_id"].comment = "- Description: A reference to table ihm_model_list.model_id."
    model.table("PDB", "ihm_cross_link_result_parameters").column_definitions["psi"].comment = "- Description: The uncertainty in the crosslinking experimental data;\n May be approximated to the false positive rate.\n- Type: float4"
    model.table("PDB", "ihm_cross_link_result_parameters").column_definitions["restraint_id"].comment = "- Description: A reference to table ihm_cross_link_restraint.id."
    model.table("PDB", "ihm_cross_link_result_parameters").column_definitions["sigma_1"].comment = "- Description: The uncertainty in the position of residue 1 in the crosslink\n arising due to the multi-scale nature of the model represention.\n- Type: float4"
    model.table("PDB", "ihm_cross_link_result_parameters").column_definitions["sigma_2"].comment = "- Description: The uncertainty in the position of residue 2 in the crosslink\n arising due to the multi-scale nature of the model represention.\n- Type: float4"
    model.table("PDB", "ihm_cross_link_result_parameters").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_poly_probe_position").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_poly_probe_position").column_definitions["comp_id"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "ihm_poly_probe_position").column_definitions["description"].comment = "- Description: An author provided description for the residue position in the polymer.\n- Type: text"
    model.table("PDB", "ihm_poly_probe_position").column_definitions["entity_description"].comment = "- Description: Description of the entity.\n- Type: text"
    model.table("PDB", "ihm_poly_probe_position").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_poly_probe_position").column_definitions["id"].comment = "- Description: A unique identifier for the category.\n- Type: int4"
    model.table("PDB", "ihm_poly_probe_position").column_definitions["mod_res_chem_comp_descriptor_id"].comment = "- Description: A reference to table ihm_chemical_component_descriptor.id."
    model.table("PDB", "ihm_poly_probe_position").column_definitions["modification_flag"].comment = "- Description: A flag to indicate whether the residue is chemically modified or not.\n- Type: text"
    model.table("PDB", "ihm_poly_probe_position").column_definitions["mut_res_chem_comp_id"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "ihm_poly_probe_position").column_definitions["mutation_flag"].comment = "- Description: A flag to indicate whether the residue has an engineered mutation or not.\n- Type: text"
    model.table("PDB", "ihm_poly_probe_position").column_definitions["seq_id"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_poly_probe_position").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_ligand_probe").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_ligand_probe").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_ligand_probe").column_definitions["details"].comment = "- Description: Additional details regarding the ligand probe.\n- Type: text"
    model.table("PDB", "ihm_ligand_probe").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_ligand_probe").column_definitions["probe_id"].comment = "- Description: A reference to table ihm_probe_list.probe_id."
    model.table("PDB", "ihm_ligand_probe").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["id"].comment = "- Description: A unique identifier for the transformation.\n- Type: int4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["rot_matrix_1_1"].comment = "- Description: Data item [1][1] of the rotation matrix used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["rot_matrix_1_2"].comment = "- Description: Data item [1][2] of the rotation matrix used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["rot_matrix_1_3"].comment = "- Description: Data item [1][3] of the rotation matrix used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["rot_matrix_2_1"].comment = "- Description: Data item [2][1] of the rotation matrix used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["rot_matrix_2_2"].comment = "- Description: Data item [2][2] of the rotation matrix used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["rot_matrix_2_3"].comment = "- Description: Data item [2][3] of the rotation matrix used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["rot_matrix_3_1"].comment = "- Description: Data item [3][1] of the rotation matrix used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["rot_matrix_3_2"].comment = "- Description: Data item [3][2] of the rotation matrix used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["rot_matrix_3_3"].comment = "- Description: Data item [3][3] of the rotation matrix used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["tr_vector_1"].comment = "- Description: Data item [1] of the translation vector used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["tr_vector_2"].comment = "- Description: Data item [2] of the translation vector used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["tr_vector_3"].comment = "- Description: Data item [3] of the translation vector used in the transformation.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_transformation").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "chem_comp").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "chem_comp").column_definitions["formula"].comment = "- Description: The formula for the chemical component. Formulae are written\n according to the following rules:\n (1) Only recognized element symbols may be used.\n (2) Each element symbol is followed by a 'count' number. A count\n    of '1' may be omitted.\n (3) A space or parenthesis must separate each cluster of\n    (element symbol + count), but in general parentheses are\n    not used.\n (4) The order of elements depends on whether carbon is\n    present or not. If carbon is present, the order should be:\n    C, then H, then the other elements in alphabetical order\n    of their symbol. If carbon is not present, the elements\n    are listed purely in alphabetic order of their symbol. This\n    is the 'Hill' system used by Chemical Abstracts.\n- Examples: C18 H19 N7 O8 S\n- Type: text"
    model.table("PDB", "chem_comp").column_definitions["formula_weight"].comment = "- Description: Formula mass in daltons of the chemical component.\n- Type: float4"
    model.table("PDB", "chem_comp").column_definitions["id"].comment = "- Description: The value of _chem_comp.id must uniquely identify each item in\n the CHEM_COMP list.\n For protein polymer entities, this is the three-letter code for\n the amino acid.\n For nucleic acid polymer entities, this is the one-letter code\n for the base.\n- Examples: ALA,VAL,DG,C\n- Type: text"
    model.table("PDB", "chem_comp").column_definitions["mon_nstd_flag"].comment = "- Description: 'yes' indicates that this is a 'standard' monomer, 'no'\n indicates that it is 'nonstandard'. Nonstandard monomers\n should be described in more detail using the\n _chem_comp.mon_nstd_parent, _chem_comp.mon_nstd_class and\n _chem_comp.mon_nstd_details data items.\n- Type: text"
    model.table("PDB", "chem_comp").column_definitions["name"].comment = "- Description: The full name of the component.\n- Examples: alanine,valine,adenine,cytosine\n- Type: text"
    model.table("PDB", "chem_comp").column_definitions["pdbx_synonyms"].comment = "- Description: Synonym list for the component.\n- Examples: ATP\n- Type: text"
    model.table("PDB", "chem_comp").column_definitions["type"].comment = "- Description: For standard polymer components, the type of the monomer.\n Note that monomers that will form polymers are of three types:\n linking monomers, monomers with some type of N-terminal (or 5')\n cap and monomers with some type of C-terminal (or 3') cap.\n- Type: text"
    model.table("PDB", "chem_comp").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "entity_name_com").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "entity_name_com").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "entity_name_com").column_definitions["name"].comment = "- Description: A common name for the entity.\n- Examples: HIV protease monomer,hemoglobin alpha chain,2-fluoro-1,4-dichloro benzene,arbutin\n- Type: text"
    model.table("PDB", "entity_name_com").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "struct_asym").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "struct_asym").column_definitions["details"].comment = "- Description: A description of special aspects of this portion of the contents\n of the asymmetric unit.\n- Examples: The drug binds to this enzyme in two roughly\n                                  twofold symmetric modes. Hence this\n                                  biological unit (3) is roughly twofold\n                                  symmetric to biological unit (2). Disorder in\n                                  the protein chain indicated with alternative\n                                  ID 2 should be used with this biological unit.\n- Type: text"
    model.table("PDB", "struct_asym").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "struct_asym").column_definitions["id"].comment = "- Description: The value of _struct_asym.id must uniquely identify a record in\n the STRUCT_ASYM list.\n Note that this item need not be a number; it can be any unique\n identifier.\n- Examples: 1,A,2B3\n- Type: text"
    model.table("PDB", "struct_asym").column_definitions["pdbx_PDB_id"].comment = "- Description: This data item is a pointer to _atom_site.pdbx_PDB_strand_id the\n ATOM_SITE category.\n- Examples: 1ABC\n- Type: text"
    model.table("PDB", "struct_asym").column_definitions["pdbx_alt_id"].comment = "- Description: This data item is a pointer to _atom_site.ndb_alias_strand_id the\n ATOM_SITE category.\n- Type: text"
    model.table("PDB", "struct_asym").column_definitions["pdbx_blank_PDB_chainid_flag"].comment = "- Description: A flag indicating that this entity was originally labeled\n with a blank PDB chain id.\n- Type: text"
    model.table("PDB", "struct_asym").column_definitions["pdbx_modified"].comment = "- Description: This data item indicates whether the structural elements are modified.\n- Examples: y\n- Type: text"
    model.table("PDB", "struct_asym").column_definitions["pdbx_order"].comment = "- Description: This data item gives the order of the structural elements in the\n ATOM_SITE category.\n- Type: int4"
    model.table("PDB", "struct_asym").column_definitions["pdbx_type"].comment = "- Description: This data item describes the general type of the structural elements\n in the ATOM_SITE category.\n- Type: text"
    model.table("PDB", "struct_asym").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "entity").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "entity").column_definitions["details"].comment = "- Description: A description of special aspects of the entity.\n- Type: text"
    model.table("PDB", "entity").column_definitions["formula_weight"].comment = "- Description: Formula mass in daltons of the entity.\n- Type: float4"
    model.table("PDB", "entity").column_definitions["id"].comment = "- Description: The value of _entity.id must uniquely identify a record in the\n ENTITY list.\n Note that this item need not be a number; it can be any unique\n identifier.\n- Type: text"
    model.table("PDB", "entity").column_definitions["pdbx_description"].comment = "- Description: A description of the entity.\n Corresponds to the compound name in the PDB format.\n- Examples: Green fluorescent protein,DNA (5'-D(*GP*(CH3)CP*GP*(CH3)CP*GP*C)-3'),PROFLAVINE,PROTEIN (DEOXYRIBONUCLEASE I (E.C.3.1.21.1))\n- Type: text"
    model.table("PDB", "entity").column_definitions["pdbx_number_of_molecules"].comment = "- Description: A place holder for the number of molecules of the entity in\n the entry.\n- Examples: 1,2,3\n- Type: int4"
    model.table("PDB", "entity").column_definitions["src_method"].comment = "- Description: The method by which the sample for the entity was produced.\n Entities isolated directly from natural sources (tissues, soil\n samples etc.) are expected to have further information in the\n ENTITY_SRC_NAT category. Entities isolated from genetically\n manipulated sources are expected to have further information in\n the ENTITY_SRC_GEN category.\n- Type: text"
    model.table("PDB", "entity").column_definitions["type"].comment = "- Description: Defines the type of the entity.\n Polymer entities are expected to have corresponding\n ENTITY_POLY and associated entries.\n Non-polymer entities are expected to have corresponding\n CHEM_COMP and associated entries.\n Water entities are not expected to have corresponding\n entries in the ENTITY category.\n- Type: text"
    model.table("PDB", "entity").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_entity_poly_segment").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_entity_poly_segment").column_definitions["comp_id_begin"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "ihm_entity_poly_segment").column_definitions["comp_id_end"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "ihm_entity_poly_segment").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_entity_poly_segment").column_definitions["id"].comment = "- Description: A unique identifier for the polymeric segment.\n- Type: int4"
    model.table("PDB", "ihm_entity_poly_segment").column_definitions["seq_id_begin"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_entity_poly_segment").column_definitions["seq_id_end"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_entity_poly_segment").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "entity_name_sys").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "entity_name_sys").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "entity_name_sys").column_definitions["name"].comment = "- Description: The systematic name for the entity.\n- Examples: hydroquinone-beta-D-pyranoside,EC 2.1.1.1,2-fluoro-1,4-dichlorobenzene\n- Type: text"
    model.table("PDB", "entity_name_sys").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_multi_state_model_group_link").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_multi_state_model_group_link").column_definitions["model_group_id"].comment = "- Description: A reference to table ihm_model_group.id."
    model.table("PDB", "ihm_multi_state_model_group_link").column_definitions["state_id"].comment = "- Description: A reference to table ihm_multi_state_modeling.state_id."
    model.table("PDB", "ihm_multi_state_model_group_link").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_cross_link_restraint").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["asym_id_1"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["asym_id_2"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["atom_id_1"].comment = "- Description: The atom identifier for the first monomer partner in the cross link.\n This data item is a pointer to _chem_comp_atom.atom_id in the \n CHEM_COMP_ATOM category.\n- Type: text"
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["atom_id_2"].comment = "- Description: The atom identifier for the second monomer partner in the cross link.\n This data item is a pointer to _chem_comp_atom.atom_id in the \n CHEM_COMP_ATOM category.\n- Type: text"
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["comp_id_1"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["comp_id_2"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["conditional_crosslink_flag"].comment = "- Description: The cross link conditionality.\n- Type: text"
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["distance_threshold"].comment = "- Description: The distance threshold applied to this crosslink in the integrative modeling task.\n- Type: float4"
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["entity_id_1"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["entity_id_2"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["group_id"].comment = "- Description: A reference to table ihm_cross_link_list.id."
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["id"].comment = "- Description: A unique identifier for the cross link record.\n- Type: int4"
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["model_granularity"].comment = "- Description: The coarse-graining information for the crosslink implementation.\n- Type: text"
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["psi"].comment = "- Description: The uncertainty in the crosslinking experimental data;\n may be approximated to the false positive rate.\n- Type: float4"
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["restraint_type"].comment = "- Description: The type of the cross link restraint applied.\n- Type: text"
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["seq_id_1"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["seq_id_2"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["sigma_1"].comment = "- Description: The uncertainty in the position of residue 1 in the crosslink\n arising due to the multi-scale nature of the model represention.\n- Type: float4"
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["sigma_2"].comment = "- Description: The uncertainty in the position of residue 2 in the crosslink\n arising due to the multi-scale nature of the model represention.\n- Type: float4"
    model.table("PDB", "ihm_cross_link_restraint").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_model_group_link").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_model_group_link").column_definitions["group_id"].comment = "- Description: A reference to table ihm_model_group.id."
    model.table("PDB", "ihm_model_group_link").column_definitions["model_id"].comment = "- Description: A reference to table ihm_model_list.model_id."
    model.table("PDB", "ihm_model_group_link").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_poly_atom_feature").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_poly_atom_feature").column_definitions["asym_id"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_poly_atom_feature").column_definitions["atom_id"].comment = "- Description: The identifier of the atom."
    model.table("PDB", "ihm_poly_atom_feature").column_definitions["comp_id"].comment = "- Description: A reference to table entity_poly_seq.mon_id."
    model.table("PDB", "ihm_poly_atom_feature").column_definitions["entity_id"].comment = "- Description: A reference to table entity_poly_seq.entity_id."
    model.table("PDB", "ihm_poly_atom_feature").column_definitions["feature_id"].comment = "- Description: A reference to table ihm_feature_list.feature_id."
    model.table("PDB", "ihm_poly_atom_feature").column_definitions["ordinal_id"].comment = "- Description: A unique identifier for the category.\n- Type: int4"
    model.table("PDB", "ihm_poly_atom_feature").column_definitions["seq_id"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_poly_atom_feature").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_modeling_post_process").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_modeling_post_process").column_definitions["analysis_id"].comment = "- Description: An identifier for the post modeling analysis. This data item accounts for\n multiple post-modeling analyses that can be carried out.\n- Type: int4"
    model.table("PDB", "ihm_modeling_post_process").column_definitions["dataset_group_id"].comment = "- Description: A reference to table ihm_dataset_group.id."
    model.table("PDB", "ihm_modeling_post_process").column_definitions["details"].comment = "- Description: Additional details regarding post processing.\n- Type: text"
    model.table("PDB", "ihm_modeling_post_process").column_definitions["feature"].comment = "- Description: The parameter/feature used in the post modeling analysis.\n- Type: text"
    model.table("PDB", "ihm_modeling_post_process").column_definitions["feature_name"].comment = "- Description: The name of the parameter/feature used in the post modeling analysis.\n- Examples: Rosetta energy,GOAP (orientation-dependent all-atom statistical potential)\n- Type: text"
    model.table("PDB", "ihm_modeling_post_process").column_definitions["id"].comment = "- Description: A unique identifier for the post modeling analysis/step combination.\n- Type: int4"
    model.table("PDB", "ihm_modeling_post_process").column_definitions["num_models_begin"].comment = "- Description: The number of models at the beginning of the post processing step.\n- Type: int4"
    model.table("PDB", "ihm_modeling_post_process").column_definitions["num_models_end"].comment = "- Description: The number of models the the end of the post processing step.\n- Type: int4"
    model.table("PDB", "ihm_modeling_post_process").column_definitions["protocol_id"].comment = "- Description: A reference to table ihm_modeling_protocol.id."
    model.table("PDB", "ihm_modeling_post_process").column_definitions["script_file_id"].comment = "- Description: A reference to table ihm_external_files.id."
    model.table("PDB", "ihm_modeling_post_process").column_definitions["software_id"].comment = "- Description: A reference to table software.pdbx_ordinal."
    model.table("PDB", "ihm_modeling_post_process").column_definitions["step_id"].comment = "- Description: In a multi-step process, this identifier denotes the particular\n step in the post modeling analysis.\n- Type: int4"
    model.table("PDB", "ihm_modeling_post_process").column_definitions["struct_assembly_id"].comment = "- Description: A reference to table ihm_struct_assembly.id."
    model.table("PDB", "ihm_modeling_post_process").column_definitions["type"].comment = "- Description: The type of post modeling analysis being carried out.\n- Type: text"
    model.table("PDB", "ihm_modeling_post_process").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_cross_link_result").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_cross_link_result").column_definitions["details"].comment = "- Description: This records holds any associated details of the results of the particular \n crosslink restraint in the integrative modeling task.\n- Type: text"
    model.table("PDB", "ihm_cross_link_result").column_definitions["distance_threshold"].comment = "- Description: The distance threshold applied to this crosslink in the integrative modeling task.\n- Type: float4"
    model.table("PDB", "ihm_cross_link_result").column_definitions["ensemble_id"].comment = "- Description: A reference to table ihm_ensemble_info.ensemble_id."
    model.table("PDB", "ihm_cross_link_result").column_definitions["id"].comment = "- Description: A unique identifier for the restraint/ensemble combination.\n- Type: int4"
    model.table("PDB", "ihm_cross_link_result").column_definitions["median_distance"].comment = "- Description: The median distance between the crosslinked residues in the sampled models.\n- Type: float4"
    model.table("PDB", "ihm_cross_link_result").column_definitions["num_models"].comment = "- Description: Number of models sampled in the integrative modeling task, for which\n the crosslinking distance is provided.\n- Type: int4"
    model.table("PDB", "ihm_cross_link_result").column_definitions["restraint_id"].comment = "- Description: A reference to table ihm_cross_link_restraint.id."
    model.table("PDB", "ihm_cross_link_result").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["dataset_group_id"].comment = "- Description: A reference to table ihm_dataset_group.id."
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["description"].comment = "- Description: Textual description of the protocol step.\n- Type: text"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["ensemble_flag"].comment = "- Description: A flag to indicate if the modeling involves an ensemble.\n- Type: text"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["id"].comment = "- Description: A unique identifier for the modeling protocol/step combination.\n- Type: int4"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["multi_scale_flag"].comment = "- Description: A flag to indicate if the modeling is multi scale.\n- Type: text"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["multi_state_flag"].comment = "- Description: A flag to indicate if the modeling is multi state.\n- Type: text"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["num_models_begin"].comment = "- Description: The number of models in the beginning of the step.\n- Type: int4"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["num_models_end"].comment = "- Description: The number of models at the end of the step.\n- Type: int4"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["ordered_flag"].comment = "- Description: A flag to indicate if the modeling involves an ensemble ordered by time or other order.\n- Type: text"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["protocol_id"].comment = "- Description: A reference to table ihm_modeling_protocol.id."
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["script_file_id"].comment = "- Description: A reference to table ihm_external_files.id."
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["software_id"].comment = "- Description: A reference to table software.pdbx_ordinal."
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["step_id"].comment = "- Description: An index for a particular step within the modeling protocol.\n- Type: int4"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["step_method"].comment = "- Description: Description of the method involved in the modeling step.\n- Examples: Replica exchange monte carlo,Simulated annealing monte carlo,Monte carlo sampling\n- Type: text"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["step_name"].comment = "- Description: The name or type of the modeling step.\n- Examples: Sampling/Scoring,Refinement\n- Type: text"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["struct_assembly_description"].comment = "- Description: A textual description of the structural assembly being modeled.\n- Examples: Nup84 sub-complex,PhoQ\n- Type: text"
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["struct_assembly_id"].comment = "- Description: A reference to table ihm_struct_assembly.id."
    model.table("PDB", "ihm_modeling_protocol_details").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "audit_conform").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "audit_conform").column_definitions["dict_location"].comment = "- Description: A file name or uniform resource locator (URL) for the\n dictionary to which the current data block conforms.\n- Type: text"
    model.table("PDB", "audit_conform").column_definitions["dict_name"].comment = "- Description: The string identifying the highest-level dictionary defining\n data names used in this file.\n- Type: text"
    model.table("PDB", "audit_conform").column_definitions["dict_version"].comment = "- Description: The version number of the dictionary to which the current\n data block conforms.\n- Type: text"
    model.table("PDB", "audit_conform").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "pdbx_entry_details").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "pdbx_entry_details").column_definitions["entry_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "pdbx_entry_details").column_definitions["sequence_details"].comment = "- Description: Additional details about the sequence or sequence database correspondences\n for this entry.\n- Type: text"
    model.table("PDB", "pdbx_entry_details").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_multi_state_modeling").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_multi_state_modeling").column_definitions["details"].comment = "- Description: Additional textual details of the multi-state modeling, if required.\n- Examples: open state ensemble 1,closed state ensemble 2,bound to heme\n- Type: text"
    model.table("PDB", "ihm_multi_state_modeling").column_definitions["experiment_type"].comment = "- Description: The type of multi-state modeling experiment carried out.\n- Type: text"
    model.table("PDB", "ihm_multi_state_modeling").column_definitions["population_fraction"].comment = "- Description: A fraction representing the population of the particular state.\n- Type: float4"
    model.table("PDB", "ihm_multi_state_modeling").column_definitions["population_fraction_sd"].comment = "- Description: The standard deviation of the population fraction.\n- Type: float4"
    model.table("PDB", "ihm_multi_state_modeling").column_definitions["state_group_id"].comment = "- Description: An identifier for a collections of states in the multi-state modeling.\n This data item can be used when structural models belong to diffent\n multi-state modeling types.\n- Type: int4"
    model.table("PDB", "ihm_multi_state_modeling").column_definitions["state_id"].comment = "- Description: A unique identifier for a particular state in the multi-state modeling.\n- Type: int4"
    model.table("PDB", "ihm_multi_state_modeling").column_definitions["state_name"].comment = "- Description: A descriptive name for the state.\n- Examples: open,closed,bound,unbound,active,inactive,relaxed,tensed\n- Type: text"
    model.table("PDB", "ihm_multi_state_modeling").column_definitions["state_type"].comment = "- Description: The type that the multiple states being modeled belong to.\n- Examples: conformational change,ligand binding,complex formation,complex dissociation\n- Type: text"
    model.table("PDB", "ihm_multi_state_modeling").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["details"].comment = "- Description: Details of how the 2DEM restraint is applied in the modeling algorithm.\n- Examples: The 2DEM restraint fits a given model to an 2DEM class average and\n        computes a score that quantifies the match. The computation proceeds\n        in three stages: generation of 3D model projections on a 2D grid, \n        alignment of the model projections and the 2DEM class average image, \n        and calculation of the best fitting score.\n- Type: text"
    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["id"].comment = "- Description: A unique identifier for the 2dem class average.\n- Type: int4"
    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["image_resolution"].comment = "- Description: Resolution of the 2dem class average.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["image_segment_flag"].comment = "- Description: A flag that indicates whether or not the 2DEM class average image is segmented i.e.,\n whether the whole image is used or only a portion of it is used (by masking \n or by other means) as restraint in the modeling.\n- Type: text"
    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["number_of_projections"].comment = "- Description: Number of 2D projections of the model used in the fitting.\n- Type: int4"
    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["number_raw_micrographs"].comment = "- Description: The number of raw micrographs used to obtain the class average.\n- Type: int4"
    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["pixel_size_height"].comment = "- Description: Pixel size height of the 2dem class average image.\n While fitting the model to the image, _ihm_2dem_class_average_restraint.pixel_size_height\n is used along with _ihm_2dem_class_average_restraint.pixel_size_width to scale the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["pixel_size_width"].comment = "- Description: Pixel size width of the 2dem class average image.\n While fitting the model to the image, _ihm_2dem_class_average_restraint.pixel_size_width\n is used along with _ihm_2dem_class_average_restraint.pixel_size_height to scale the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["struct_assembly_id"].comment = "- Description: A reference to table ihm_struct_assembly.id."
    model.table("PDB", "ihm_2dem_class_average_restraint").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_geometric_object_center").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_geometric_object_center").column_definitions["id"].comment = "- Description: A unique identifier for the center.\n- Type: int4"
    model.table("PDB", "ihm_geometric_object_center").column_definitions["xcoord"].comment = "- Description: The x-coordinate of the center.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_center").column_definitions["ycoord"].comment = "- Description: The y-coordinate of the center.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_center").column_definitions["zcoord"].comment = "- Description: The z-coordinate of the center.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_center").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_ensemble_info").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_ensemble_info").column_definitions["details"].comment = "- Description: Additional details regarding the ensemble.\n- Type: text"
    model.table("PDB", "ihm_ensemble_info").column_definitions["ensemble_clustering_feature"].comment = "- Description: The parameter/feature used for clustering the models, if applicable.\n- Type: text"
    model.table("PDB", "ihm_ensemble_info").column_definitions["ensemble_clustering_method"].comment = "- Description: The clustering method used to obtain the ensemble, if applicable.\n- Type: text"
    model.table("PDB", "ihm_ensemble_info").column_definitions["ensemble_file_id"].comment = "- Description: A reference to table ihm_external_files.id."
    model.table("PDB", "ihm_ensemble_info").column_definitions["ensemble_id"].comment = "- Description: A unique id for the ensemble.\n- Type: int4"
    model.table("PDB", "ihm_ensemble_info").column_definitions["ensemble_name"].comment = "- Description: An optional name for the cluster or ensemble for better description.\n- Examples: ensemble1,ensemble2,cluster1,cluster2,open state,closed state\n- Type: text"
    model.table("PDB", "ihm_ensemble_info").column_definitions["ensemble_precision_value"].comment = "- Description: The precision of each cluster or ensemble is calculated as dRMSD, which\n is the average C-alpha distance root mean square deviation (dRMSD) \n between the individual models in the cluster and the cluster centroid.\n The cluster centroid is defined as the model with the minimal sum of\n dRMSDs to the other models in the cluster or ensemble.\n- Type: float4"
    model.table("PDB", "ihm_ensemble_info").column_definitions["model_group_id"].comment = "- Description: A reference to table ihm_model_group.id."
    model.table("PDB", "ihm_ensemble_info").column_definitions["num_ensemble_models"].comment = "- Description: The number of models in the current ensemble being described.\n- Type: int4"
    model.table("PDB", "ihm_ensemble_info").column_definitions["num_ensemble_models_deposited"].comment = "- Description: The number of models from the current ensemble that is deposited.\n- Type: int4"
    model.table("PDB", "ihm_ensemble_info").column_definitions["post_process_id"].comment = "- Description: A reference to table ihm_modeling_post_process.id."
    model.table("PDB", "ihm_ensemble_info").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "chem_comp_atom").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "chem_comp_atom").column_definitions["alt_atom_id"].comment = "- Description: An alternative identifier for the atom. This data item would be\n used in cases where alternative nomenclatures exist for labelling\n atoms in a group.\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["atom_id"].comment = "- Description: The value of _chem_comp_atom.atom_id must uniquely identify\n each atom in each monomer in the CHEM_COMP_ATOM list.\n The atom identifiers need not be unique over all atoms in the\n data block; they need only be unique for each atom in a\n component.\n Note that this item need not be a number; it can be any unique\n identifier.\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["charge"].comment = "- Description: The net integer charge assigned to this atom. This is the\n formal charge assignment normally found in chemical diagrams.\n- Examples: 1,-1\n- Type: int4"
    model.table("PDB", "chem_comp_atom").column_definitions["comp_id"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "chem_comp_atom").column_definitions["model_Cartn_x"].comment = "- Description: The x component of the coordinates for this atom in this\n component specified as orthogonal angstroms. The choice of\n reference axis frame for the coordinates is arbitrary.\n The set of coordinates input for the entity here is intended to\n correspond to the atomic model used to generate restraints for\n structure refinement, not to atom sites in the ATOM_SITE\n list.\n- Type: float4"
    model.table("PDB", "chem_comp_atom").column_definitions["model_Cartn_x_esd"].comment = "- Description: The standard uncertainty (estimated standard deviation)\n of _chem_comp_atom.model_Cartn_x.\n- Type: float4"
    model.table("PDB", "chem_comp_atom").column_definitions["model_Cartn_y"].comment = "- Description: The y component of the coordinates for this atom in this\n component specified as orthogonal angstroms. The choice of\n reference axis frame for the coordinates is arbitrary.\n The set of coordinates input for the entity here is intended to\n correspond to the atomic model used to generate restraints for\n structure refinement, not to atom sites in the ATOM_SITE\n list.\n- Type: float4"
    model.table("PDB", "chem_comp_atom").column_definitions["model_Cartn_y_esd"].comment = "- Description: The standard uncertainty (estimated standard deviation)\n of _chem_comp_atom.model_Cartn_y.\n- Type: float4"
    model.table("PDB", "chem_comp_atom").column_definitions["model_Cartn_z"].comment = "- Description: The z component of the coordinates for this atom in this\n component specified as orthogonal angstroms. The choice of\n reference axis frame for the coordinates is arbitrary.\n The set of coordinates input for the entity here is intended to\n correspond to the atomic model used to generate restraints for\n structure refinement, not to atom sites in the ATOM_SITE\n list.\n- Type: float4"
    model.table("PDB", "chem_comp_atom").column_definitions["model_Cartn_z_esd"].comment = "- Description: The standard uncertainty (estimated standard deviation)\n of _chem_comp_atom.model_Cartn_z.\n- Type: float4"
    model.table("PDB", "chem_comp_atom").column_definitions["partial_charge"].comment = "- Description: The partial charge assigned to this atom.\n- Type: float4"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_align"].comment = "- Description: Atom name alignment offset in PDB atom field.\n- Type: int4"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_alt_atom_id"].comment = "- Description: An alternative identifier for the atom. This data item would be\n used in cases where alternative nomenclatures exist for labelling\n atoms in a group.\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_alt_comp_id"].comment = "- Description: An alternative identifier for the atom. This data item would be\n used in cases where alternative nomenclatures exist for labelling\n atoms in a group.\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_aromatic_flag"].comment = "- Description: A flag indicating an aromatic atom.\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_component_atom_id"].comment = "- Description: The atom identifier in the subcomponent where a  \n larger component has been divided subcomponents.\n- Examples: CB,CA,CG\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_component_comp_id"].comment = "- Description: The component identifier for the subcomponent where a  \n larger component has been divided subcomponents.\n- Examples: HIS,PRO\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_component_entity_id"].comment = "- Description: A reference to entity identifier in data  category \n pdbx_chem_comp_subcomponent_entity_list.\n- Type: int4"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_component_id"].comment = "- Description: A reference to _pdbx_reference_entity_list.component_id\n- Type: int4"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_leaving_atom_flag"].comment = "- Description: A flag indicating a leaving atom.\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_model_Cartn_x_ideal"].comment = "- Description: An alternative x component of the coordinates for this atom in this\n component specified as orthogonal angstroms.\n- Type: float4"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_model_Cartn_y_ideal"].comment = "- Description: An alternative y component of the coordinates for this atom in this\n component specified as orthogonal angstroms.\n- Type: float4"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_model_Cartn_z_ideal"].comment = "- Description: An alternative z component of the coordinates for this atom in this\n component specified as orthogonal angstroms.\n- Type: float4"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_ordinal"].comment = "- Description: Ordinal index for the component atom list.\n- Type: int4"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_polymer_type"].comment = "- Description: Is the atom in a polymer or non-polymer subcomponent in the BIRD definition.\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_ref_id"].comment = "- Description: A reference to _pdbx_reference_entity_list.ref_entity_id\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_residue_numbering"].comment = "- Description: Preferred residue numbering in the BIRD definition.\n- Type: int4"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_stereo_config"].comment = "- Description: The chiral configuration of the atom that is a chiral center.\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["pdbx_stnd_atom_id"].comment = "- Description: A standard identifier for the atom. This data item is used when\n IUPAC/IUBMB nomenclature exists for labeling atoms.\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["substruct_code"].comment = "- Description: This data item assigns the atom to a substructure of the\n component, if appropriate.\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["type_symbol"].comment = "- Description: The code used to identify the atom species representing \n this atom type. Normally this code is the element\n symbol.\n- Examples: C,N,O\n- Type: text"
    model.table("PDB", "chem_comp_atom").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "entity_poly_seq").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "entity_poly_seq").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "entity_poly_seq").column_definitions["hetero"].comment = "- Description: A flag to indicate whether this monomer in the polymer is\n heterogeneous in sequence.\n- Type: text"
    model.table("PDB", "entity_poly_seq").column_definitions["mon_id"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "entity_poly_seq").column_definitions["num"].comment = "- Description: The value of _entity_poly_seq.num must uniquely and sequentially\n identify a record in the ENTITY_POLY_SEQ list.\n Note that this item must be a number and that the sequence\n numbers must progress in increasing numerical order.\n- Type: int4"
    model.table("PDB", "entity_poly_seq").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_struct_assembly_details").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_struct_assembly_details").column_definitions["assembly_id"].comment = "- Description: A reference to table ihm_struct_assembly.id."
    model.table("PDB", "ihm_struct_assembly_details").column_definitions["asym_id"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_struct_assembly_details").column_definitions["entity_description"].comment = "- Description: A text description of the molecular entity\n- Type: text"
    model.table("PDB", "ihm_struct_assembly_details").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_struct_assembly_details").column_definitions["entity_poly_segment_id"].comment = "- Description: A reference to table ihm_entity_poly_segment.id."
    model.table("PDB", "ihm_struct_assembly_details").column_definitions["id"].comment = "- Description: A unique identifier for the structural assembly description.\n- Type: int4"
    model.table("PDB", "ihm_struct_assembly_details").column_definitions["parent_assembly_id"].comment = "- Description: A reference to table ihm_struct_assembly.id."
    model.table("PDB", "ihm_struct_assembly_details").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "entity_src_gen").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "entity_src_gen").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "entity_src_gen").column_definitions["gene_src_common_name"].comment = "- Description: The common name of the natural organism from which the gene was\n obtained.\n- Examples: man,yeast,bacteria\n- Type: text"
    model.table("PDB", "entity_src_gen").column_definitions["gene_src_genus"].comment = "- Description: The genus of the natural organism from which the gene was\n obtained.\n- Examples: Homo,Saccharomyces,Escherichia\n- Type: text"
    model.table("PDB", "entity_src_gen").column_definitions["pdbx_alt_source_flag"].comment = "- Description: This data item identifies cases in which an alternative source\n modeled.\n- Type: text"
    model.table("PDB", "entity_src_gen").column_definitions["pdbx_gene_src_scientific_name"].comment = "- Description: Scientific name of the organism.\n- Examples: Homo sapiens,ESCHERICHIA COLI\nHOMO SAPIENS\nSACCHAROMYCES CEREVISIAE\n- Type: text"
    model.table("PDB", "entity_src_gen").column_definitions["pdbx_src_id"].comment = "- Description: This data item is an ordinal identifier for entity_src_gen data records.\n- Type: int4"
    model.table("PDB", "entity_src_gen").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_model_representation").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_model_representation").column_definitions["details"].comment = "- Description: Additional details about the model representation.\n- Type: text"
    model.table("PDB", "ihm_model_representation").column_definitions["id"].comment = "- Description: A unique identifier for the model representation.\n- Type: int4"
    model.table("PDB", "ihm_model_representation").column_definitions["name"].comment = "- Description: Name/brief description for the model representation.\n- Type: text"
    model.table("PDB", "ihm_model_representation").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "atom_type").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "atom_type").column_definitions["symbol"].comment = "- Description: The code used to identify the atom species (singular or plural)\n representing this atom type. Normally this code is the element\n symbol. The code may be composed of any character except\n an underscore with the additional proviso that digits designate\n an oxidation state and must be followed by a + or - character.\n- Examples: C,Cu2+,H(SDS),dummy,FeNi\n- Type: text"
    model.table("PDB", "atom_type").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_model_representation_details").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_model_representation_details").column_definitions["description"].comment = "- Description: Additional description regarding the model representation.\n- Type: text"
    model.table("PDB", "ihm_model_representation_details").column_definitions["entity_asym_id"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_model_representation_details").column_definitions["entity_description"].comment = "- Description: A text description of the molecular entity\n- Type: text"
    model.table("PDB", "ihm_model_representation_details").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_model_representation_details").column_definitions["entity_poly_segment_id"].comment = "- Description: A reference to table ihm_entity_poly_segment.id."
    model.table("PDB", "ihm_model_representation_details").column_definitions["id"].comment = "- Description: A unique identifier for the category.\n- Type: int4"
    model.table("PDB", "ihm_model_representation_details").column_definitions["model_granularity"].comment = "- Description: The level of detail at which model primitive objects are applied to the structure.\n- Type: text"
    model.table("PDB", "ihm_model_representation_details").column_definitions["model_mode"].comment = "- Description: The manner in which the segment is modeled.\n- Type: text"
    model.table("PDB", "ihm_model_representation_details").column_definitions["model_object_count"].comment = "- Description: The number of primitive objects used to model a feature in the case of 'by-feature' granularity.\n- Type: int4"
    model.table("PDB", "ihm_model_representation_details").column_definitions["model_object_primitive"].comment = "- Description: The primitive object used to model this segment.\n- Type: text"
    model.table("PDB", "ihm_model_representation_details").column_definitions["representation_id"].comment = "- Description: A reference to table ihm_model_representation.id."
    model.table("PDB", "ihm_model_representation_details").column_definitions["starting_model_id"].comment = "- Description: A reference to table ihm_starting_model_details.starting_model_id."
    model.table("PDB", "ihm_model_representation_details").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "entity_poly").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "entity_poly").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "entity_poly").column_definitions["nstd_chirality"].comment = "- Description: A flag to indicate whether the polymer contains at least\n one monomer unit with chirality different from that specified in\n _entity_poly.type.\n- Type: text"
    model.table("PDB", "entity_poly").column_definitions["nstd_linkage"].comment = "- Description: A flag to indicate whether the polymer contains at least\n one monomer-to-monomer link different from that implied by\n _entity_poly.type.\n- Type: text"
    model.table("PDB", "entity_poly").column_definitions["nstd_monomer"].comment = "- Description: A flag to indicate whether the polymer contains at least\n one monomer that is not considered standard.\n- Type: text"
    model.table("PDB", "entity_poly").column_definitions["pdbx_seq_one_letter_code"].comment = "- Description: Chemical sequence expressed as string of one-letter\n amino acid codes. Modifications and non-standard\n amino acids are coded as X.\n- Examples: HHHH(MSE)AKQRSG or AUCGGAAU,A  for alanine or adenine\nB  for ambiguous asparagine/aspartic-acid\nR  for arginine\nN  for asparagine\nD  for aspartic-acid\nC  for cysteine or cystine or cytosine\nQ  for glutamine\nE  for glutamic-acid\nZ  for ambiguous glutamine/glutamic acid\nG  for glycine or guanine\nH  for histidine\nI  for isoleucine\nL  for leucine\nK  for lysine\nM  for methionine\nF  for phenylalanine\nP  for proline\nS  for serine\nT  for threonine or thymine\nW  for tryptophan\nY  for tyrosine\nV  for valine\nU  for uracil\nO  for water\nX  for other\n- Type: text"
    model.table("PDB", "entity_poly").column_definitions["pdbx_seq_one_letter_code_can"].comment = "- Description: Cannonical chemical sequence expressed as string of\n               one-letter amino acid codes. Modifications are coded\n               as the parent amino acid where possible.\nA  for alanine or adenine\nB  for ambiguous asparagine/aspartic-acid\nR  for arginine\nN  for asparagine\nD  for aspartic-acid\nC  for cysteine or cystine or cytosine\nQ  for glutamine\nE  for glutamic-acid\nZ  for ambiguous glutamine/glutamic acid\nG  for glycine or guanine\nH  for histidine\nI  for isoleucine\nL  for leucine\nK  for lysine\nM  for methionine\nF  for phenylalanine\nP  for proline\nS  for serine\nT  for threonine or thymine\nW  for tryptophan\nY  for tyrosine\nV  for valine\nU  for uracil\n- Examples: MSHHWGYGKHNGPEHWHKDFPIAKGERQSPVDIDTHTAKYDPSLKPLSVSYDQATSLRILNNGAAFNVEFD\n- Type: text"
    model.table("PDB", "entity_poly").column_definitions["pdbx_sequence_evidence_code"].comment = "- Description: Evidence for the assignment of the polymer sequence.\n- Type: text"
    model.table("PDB", "entity_poly").column_definitions["pdbx_strand_id"].comment = "- Description: The PDB strand/chain id(s) corresponding to this polymer entity.\n- Examples: A,B,A,B,A,B,C\n- Type: text"
    model.table("PDB", "entity_poly").column_definitions["type"].comment = "- Description: The type of the polymer.\n- Type: text"
    model.table("PDB", "entity_poly").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "pdbx_entity_nonpoly").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "pdbx_entity_nonpoly").column_definitions["comp_id"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "pdbx_entity_nonpoly").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "pdbx_entity_nonpoly").column_definitions["name"].comment = "- Description: A name for the non-polymer entity\n- Type: text"
    model.table("PDB", "pdbx_entity_nonpoly").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_model_group").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_model_group").column_definitions["details"].comment = "- Description: Additional details about the collection of models.\n- Type: text"
    model.table("PDB", "ihm_model_group").column_definitions["id"].comment = "- Description: A unique identifier for a collection or group of structural models. \n This data item can be used to group models into structural clusters\n or using other criteria based on experimental data or other\n relationships such as those belonging to the same state or time stamp.\n An ensemble of models and its representative can either be grouped together\n or can be separate groups in the ihm_model_group table. The choice between\n the two options should be decided based on how the modeling was carried out\n and how the representative was chosen. If the representative is a member of\n the ensemble (i.e., best scoring model), then it is recommended that the\n representative and the ensemble belong to the same model group. If the\n representative is calculated from the ensemble (i.e., centroid), then it is\n recommended that the representative be separated into a different group.\n- Type: int4"
    model.table("PDB", "ihm_model_group").column_definitions["name"].comment = "- Description: A name for the collection of models.\n- Examples: cluster1,cluster2,ensemble1,ensemble2,open state,closed state,bound state,unbound state,bound state ensemble 1,unbound state ensemble 2\n- Type: text"
    model.table("PDB", "ihm_model_group").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_model_representative").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_model_representative").column_definitions["id"].comment = "- Description: A unique identifier for the representative of the model group.\n- Type: int4"
    model.table("PDB", "ihm_model_representative").column_definitions["model_group_id"].comment = "- Description: A reference to table ihm_model_group.id."
    model.table("PDB", "ihm_model_representative").column_definitions["model_id"].comment = "- Description: A reference to table ihm_model_list.model_id."
    model.table("PDB", "ihm_model_representative").column_definitions["selection_criteria"].comment = "- Description: The selection criteria based on which the representative is chosen.\n- Type: text"
    model.table("PDB", "ihm_model_representative").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["asym_id"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["comp_id"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["db_asym_id"].comment = "- Description: The asym/strand identifier for the entity molecule of the database starting model.\n- Type: text"
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["db_comp_id"].comment = "- Description: The correspinding component identifier for the residue in the database starting model.\n- Type: text"
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["db_entity_id"].comment = "- Description: The molecular entity of the database starting model.\n- Type: text"
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["db_seq_id"].comment = "- Description: The corresponding residue index of the database starting model.\n- Type: int4"
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["details"].comment = "- Description: A description of special aspects of the point differences\n between the sequence of the entity or biological unit described\n in the data block and that in the starting model referenced \n from a database.\n- Examples: Conversion of modified residue MSE to MET,Point change of PHE to GLU\n- Type: text"
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["id"].comment = "- Description: A unique identifier for the entry.\n- Type: int4"
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["seq_id"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["starting_model_id"].comment = "- Description: A reference to table ihm_starting_model_details.starting_model_id."
    model.table("PDB", "ihm_starting_model_seq_dif").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_starting_computational_models").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_starting_computational_models").column_definitions["script_file_id"].comment = "- Description: A reference to table ihm_external_files.id."
    model.table("PDB", "ihm_starting_computational_models").column_definitions["software_id"].comment = "- Description: A reference to table software.pdbx_ordinal."
    model.table("PDB", "ihm_starting_computational_models").column_definitions["starting_model_id"].comment = "- Description: A reference to table ihm_starting_model_details.starting_model_id."
    model.table("PDB", "ihm_starting_computational_models").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_modeling_protocol").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_modeling_protocol").column_definitions["details"].comment = "- Description: Additional details about the modeling protocol.\n- Type: text"
    model.table("PDB", "ihm_modeling_protocol").column_definitions["id"].comment = "- Description: A unique identifier for the modeling protocol.\n- Type: int4"
    model.table("PDB", "ihm_modeling_protocol").column_definitions["num_steps"].comment = "- Description: Number of independent steps in the modeling protocol.\n- Type: int4"
    model.table("PDB", "ihm_modeling_protocol").column_definitions["protocol_name"].comment = "- Description: The name for the modeling protocol.\n- Examples: Multi-scale modeling of the Nuclear Pore Complex,Multi-state modeling of the RNA 4-Way Junction\n- Type: text"
    model.table("PDB", "ihm_modeling_protocol").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_starting_comparative_models").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["alignment_file_id"].comment = "- Description: A reference to table ihm_external_files.id."
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["details"].comment = "- Description: Additional details regarding the starting comparative models.\n- Type: text"
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["id"].comment = "- Description: A unique identifier for the starting comparative model.\n- Type: int4"
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["starting_model_auth_asym_id"].comment = "- Description: The chainId/auth_asym_id corresponding to the starting model.\n- Type: text"
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["starting_model_id"].comment = "- Description: A reference to table ihm_starting_model_details.starting_model_id."
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["starting_model_seq_id_begin"].comment = "- Description: The starting residue index of the starting model.\n- Type: int4"
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["starting_model_seq_id_end"].comment = "- Description: The ending residue index of the starting model.\n- Type: int4"
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["template_auth_asym_id"].comment = "- Description: The chainId/auth_asym_id corresponding to the template.\n- Type: text"
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["template_dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["template_seq_id_begin"].comment = "- Description: The starting residue index of the template.\n- Type: int4"
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["template_seq_id_end"].comment = "- Description: The ending residue index of the template.\n- Type: int4"
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["template_sequence_identity"].comment = "- Description: The percentage sequence identity between the template sequence and the comparative model sequence.\n- Type: float4"
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["template_sequence_identity_denominator"].comment = "- Description: The denominator used while calculating the sequence identity provided in \n _ihm_starting_comparative_models.template_sequence_identity.\n- Type: int4"
    model.table("PDB", "ihm_starting_comparative_models").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_dataset_group_link").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_dataset_group_link").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_dataset_group_link").column_definitions["group_id"].comment = "- Description: A reference to table ihm_dataset_group.id."
    model.table("PDB", "ihm_dataset_group_link").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_starting_model_details").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_starting_model_details").column_definitions["asym_id"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_starting_model_details").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_starting_model_details").column_definitions["description"].comment = "- Description: Additional description regarding the starting model.\n- Type: text"
    model.table("PDB", "ihm_starting_model_details").column_definitions["entity_description"].comment = "- Description: A text description of the molecular entity\n- Type: text"
    model.table("PDB", "ihm_starting_model_details").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_starting_model_details").column_definitions["entity_poly_segment_id"].comment = "- Description: A reference to table ihm_entity_poly_segment.id."
    model.table("PDB", "ihm_starting_model_details").column_definitions["starting_model_auth_asym_id"].comment = "- Description: The author assigned chainId/auth_asym_id corresponding to this starting model. \n This corresponds to the chainId/auth_asym_id of the experimental models in the\n PDB or comparative models in the Model Archive or the starting models referenced\n via a DOI. If starting models are included in IHM_STARTING_MODEL_COORD, then\n this will be the same as _ihm_starting_model_details.asym_id.\n- Type: text"
    model.table("PDB", "ihm_starting_model_details").column_definitions["starting_model_id"].comment = "- Description: A unique identifier for the starting structural model.\n- Type: text"
    model.table("PDB", "ihm_starting_model_details").column_definitions["starting_model_sequence_offset"].comment = "- Description: The offset in residue numbering between the starting model and the deposited I/H model, if applicable. \n I/H model residue number = Starting model residue number + offset\n- Type: int4"
    model.table("PDB", "ihm_starting_model_details").column_definitions["starting_model_source"].comment = "- Description: The source of the starting model.\n- Type: text"
    model.table("PDB", "ihm_starting_model_details").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_struct_assembly").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_struct_assembly").column_definitions["description"].comment = "- Description: Description of the structural assembly.\n- Type: text"
    model.table("PDB", "ihm_struct_assembly").column_definitions["id"].comment = "- Description: A unique identifier for the structural assembly.\n- Type: int4"
    model.table("PDB", "ihm_struct_assembly").column_definitions["name"].comment = "- Description: A name for the structural assembly.\n- Type: text"
    model.table("PDB", "ihm_struct_assembly").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_struct_assembly_class").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_struct_assembly_class").column_definitions["description"].comment = "- Description: Additional description regarding the class.\n- Type: text"
    model.table("PDB", "ihm_struct_assembly_class").column_definitions["id"].comment = "- Description: A unique identifier for the structural assembly class.\n- Type: int4"
    model.table("PDB", "ihm_struct_assembly_class").column_definitions["name"].comment = "- Description: A user provided name for the class.\n- Examples: TAD,Chromatin\n- Type: text"
    model.table("PDB", "ihm_struct_assembly_class").column_definitions["type"].comment = "- Description: The type of classifier.\n- Type: text"
    model.table("PDB", "ihm_struct_assembly_class").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_struct_assembly_class_link").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_struct_assembly_class_link").column_definitions["assembly_id"].comment = "- Description: A reference to table ihm_struct_assembly.id."
    model.table("PDB", "ihm_struct_assembly_class_link").column_definitions["class_id"].comment = "- Description: A reference to table ihm_struct_assembly_class.id."
    model.table("PDB", "ihm_struct_assembly_class_link").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_localization_density_files").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_localization_density_files").column_definitions["asym_id"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_localization_density_files").column_definitions["ensemble_id"].comment = "- Description: A reference to table ihm_ensemble_info.ensemble_id."
    model.table("PDB", "ihm_localization_density_files").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_localization_density_files").column_definitions["entity_poly_segment_id"].comment = "- Description: A reference to table ihm_entity_poly_segment.id."
    model.table("PDB", "ihm_localization_density_files").column_definitions["file_id"].comment = "- Description: A reference to table ihm_external_files.id."
    model.table("PDB", "ihm_localization_density_files").column_definitions["id"].comment = "- Description: A unique identifier.\n- Type: int4"
    model.table("PDB", "ihm_localization_density_files").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_chemical_component_descriptor").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_chemical_component_descriptor").column_definitions["auth_name"].comment = "- Description: The author-provided name of the component.\n- Type: text"
    model.table("PDB", "ihm_chemical_component_descriptor").column_definitions["chemical_name"].comment = "- Description: The chemical name of the component.\n- Type: text"
    model.table("PDB", "ihm_chemical_component_descriptor").column_definitions["common_name"].comment = "- Description: The common name of the component.\n- Type: text"
    model.table("PDB", "ihm_chemical_component_descriptor").column_definitions["details"].comment = "- Description: Additional details regarding the chemical component.\n- Type: text"
    model.table("PDB", "ihm_chemical_component_descriptor").column_definitions["id"].comment = "- Description: An identifier for the chemical descriptor.\n- Type: int4"
    model.table("PDB", "ihm_chemical_component_descriptor").column_definitions["inchi"].comment = "- Description: The IUPAC INCHI descriptor of the component.\n- Type: text"
    model.table("PDB", "ihm_chemical_component_descriptor").column_definitions["inchi_key"].comment = "- Description: The hashed INCHI key of the component.\n- Type: text"
    model.table("PDB", "ihm_chemical_component_descriptor").column_definitions["smiles"].comment = "- Description: The smile string of the component.\n- Type: text"
    model.table("PDB", "ihm_chemical_component_descriptor").column_definitions["smiles_canonical"].comment = "- Description: The canonical smile string of the component.\n- Type: text"
    model.table("PDB", "ihm_chemical_component_descriptor").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "pdbx_inhibitor_info").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "pdbx_inhibitor_info").column_definitions["id"].comment = "- Description: Serial number.\n- Examples: 1\n- Type: int4"
    model.table("PDB", "pdbx_inhibitor_info").column_definitions["name"].comment = "- Description: Name of inhibitor.\n- Examples: N-ACETYL-DEOXYTHYMIDINE,ADP\n- Type: text"
    model.table("PDB", "pdbx_inhibitor_info").column_definitions["num_per_asym_unit"].comment = "- Description: Number of inhibitor molecules per asymmetric unit.\n- Examples: 1\n- Type: int4"
    model.table("PDB", "pdbx_inhibitor_info").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_dataset_external_reference").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_dataset_external_reference").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_dataset_external_reference").column_definitions["file_id"].comment = "- Description: A reference to table ihm_external_files.id."
    model.table("PDB", "ihm_dataset_external_reference").column_definitions["id"].comment = "- Description: A unique identifier for the external data.\n- Type: int4"
    model.table("PDB", "ihm_dataset_external_reference").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_cross_link_list").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_cross_link_list").column_definitions["comp_id_1"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "ihm_cross_link_list").column_definitions["comp_id_2"].comment = "- Description: A reference to table chem_comp.id."
    model.table("PDB", "ihm_cross_link_list").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_cross_link_list").column_definitions["details"].comment = "- Description: Additional details regarding the cross link or the cross linking agent.\n- Type: text"
    model.table("PDB", "ihm_cross_link_list").column_definitions["entity_description_1"].comment = "- Description: A text description of molecular entity 1. \n- Type: text"
    model.table("PDB", "ihm_cross_link_list").column_definitions["entity_description_2"].comment = "- Description: A text description of molecular entity 2. \n- Type: text"
    model.table("PDB", "ihm_cross_link_list").column_definitions["entity_id_1"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_cross_link_list").column_definitions["entity_id_2"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_cross_link_list").column_definitions["group_id"].comment = "- Description: An identifier for a set of ambiguous crosslink restraints. \n Handles experimental uncertainties in the identities of \n crosslinked residues.\n- Type: int4"
    model.table("PDB", "ihm_cross_link_list").column_definitions["id"].comment = "- Description: A unique identifier for the cross link restraint.\n- Type: int4"
    model.table("PDB", "ihm_cross_link_list").column_definitions["linker_chem_comp_descriptor_id"].comment = "- Description: A reference to table ihm_chemical_component_descriptor.id."
    model.table("PDB", "ihm_cross_link_list").column_definitions["linker_type"].comment = "- Description: The type of crosslinker used.\n- Type: text"
    model.table("PDB", "ihm_cross_link_list").column_definitions["seq_id_1"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_cross_link_list").column_definitions["seq_id_2"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_cross_link_list").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_probe_list").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_probe_list").column_definitions["probe_chem_comp_descriptor_id"].comment = "- Description: A reference to table ihm_chemical_component_descriptor.id."
    model.table("PDB", "ihm_probe_list").column_definitions["probe_id"].comment = "- Description: A unique identifier for the category.\n- Type: int4"
    model.table("PDB", "ihm_probe_list").column_definitions["probe_link_type"].comment = "- Description: The type of link between the probe and the biomolecule.\n- Type: text"
    model.table("PDB", "ihm_probe_list").column_definitions["probe_name"].comment = "- Description: Author provided name for the probe.\n- Type: text"
    model.table("PDB", "ihm_probe_list").column_definitions["probe_origin"].comment = "- Description: The origin of the probe.\n- Type: text"
    model.table("PDB", "ihm_probe_list").column_definitions["reactive_probe_chem_comp_descriptor_id"].comment = "- Description: A reference to table ihm_chemical_component_descriptor.id."
    model.table("PDB", "ihm_probe_list").column_definitions["reactive_probe_flag"].comment = "- Description: Indicate whether the probe has a reactive form.\n- Type: text"
    model.table("PDB", "ihm_probe_list").column_definitions["reactive_probe_name"].comment = "- Description: Author provided name for the reactive_probe, if applicable.\n- Type: text"
    model.table("PDB", "ihm_probe_list").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_epr_restraint").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_epr_restraint").column_definitions["chi_value"].comment = "- Description: The chi value resulting from fitting the model to the EPR data.\n- Type: float4"
    model.table("PDB", "ihm_epr_restraint").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_epr_restraint").column_definitions["details"].comment = "- Description: Additional details regarding the EPR restraint used.\n- Type: text"
    model.table("PDB", "ihm_epr_restraint").column_definitions["fitting_method"].comment = "- Description: The method used for fitting the model to the EPR data.\n- Examples: Spin label rotamer refinement using DEER/PELDOR data\n- Type: text"
    model.table("PDB", "ihm_epr_restraint").column_definitions["fitting_method_citation_id"].comment = "- Description: A reference to table citation.id."
    model.table("PDB", "ihm_epr_restraint").column_definitions["fitting_particle_type"].comment = "- Description: The type of particle fit to the EPR data.\n- Examples: Unpaired electrons of the probe\n- Type: text"
    model.table("PDB", "ihm_epr_restraint").column_definitions["fitting_software_id"].comment = "- Description: A reference to table software.pdbx_ordinal."
    model.table("PDB", "ihm_epr_restraint").column_definitions["fitting_state"].comment = "- Description: An indicator to single or multiple state fitting.\n- Type: text"
    model.table("PDB", "ihm_epr_restraint").column_definitions["model_id"].comment = "- Description: A reference to table ihm_model_list.model_id."
    model.table("PDB", "ihm_epr_restraint").column_definitions["ordinal_id"].comment = "- Description: A unique identifier for the EPR restraint description.\n- Type: int4"
    model.table("PDB", "ihm_epr_restraint").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["cross_correlation_coefficient"].comment = "- Description: The cross correlation coefficient corresponding to the model to image fitting.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["id"].comment = "- Description: A unique identifier for the 2dem class average fitting data.\n- Type: int4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["model_id"].comment = "- Description: A reference to table ihm_model_list.model_id."
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["restraint_id"].comment = "- Description: A reference to table ihm_2dem_class_average_restraint.id."
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["rot_matrix_1_1"].comment = "- Description: Data item [1][1] of the rotation matrix used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["rot_matrix_1_2"].comment = "- Description: Data item [1][2] of the rotation matrix used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["rot_matrix_1_3"].comment = "- Description: Data item [1][3] of the rotation matrix used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["rot_matrix_2_1"].comment = "- Description: Data item [2][1] of the rotation matrix used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["rot_matrix_2_2"].comment = "- Description: Data item [2][2] of the rotation matrix used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["rot_matrix_2_3"].comment = "- Description: Data item [2][3] of the rotation matrix used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["rot_matrix_3_1"].comment = "- Description: Data item [3][1] of the rotation matrix used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["rot_matrix_3_2"].comment = "- Description: Data item [3][2] of the rotation matrix used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["rot_matrix_3_3"].comment = "- Description: Data item [3][3] of the rotation matrix used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["tr_vector_1"].comment = "- Description: Data item [1] of the tranlation vector used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["tr_vector_2"].comment = "- Description: Data item [2] of the tranlation vector used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["tr_vector_3"].comment = "- Description: Data item [3] of the tranlation vector used in the fitting of the model to the image.\n- Type: float4"
    model.table("PDB", "ihm_2dem_class_average_fitting").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_poly_probe_conjugate").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_poly_probe_conjugate").column_definitions["ambiguous_stoichiometry_flag"].comment = "- Description: Indicate whether there is ambiguity regarding the stoichiometry of the labeled site.\n- Type: text"
    model.table("PDB", "ihm_poly_probe_conjugate").column_definitions["chem_comp_descriptor_id"].comment = "- Description: A reference to table ihm_chemical_component_descriptor.id."
    model.table("PDB", "ihm_poly_probe_conjugate").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_poly_probe_conjugate").column_definitions["details"].comment = "- Description: Additional details regarding the conjugate.\n- Type: text"
    model.table("PDB", "ihm_poly_probe_conjugate").column_definitions["id"].comment = "- Description: A unique identifier for the category.\n- Type: int4"
    model.table("PDB", "ihm_poly_probe_conjugate").column_definitions["position_id"].comment = "- Description: A reference to table ihm_poly_probe_position.id."
    model.table("PDB", "ihm_poly_probe_conjugate").column_definitions["probe_id"].comment = "- Description: A reference to table ihm_probe_list.probe_id."
    model.table("PDB", "ihm_poly_probe_conjugate").column_definitions["probe_stoichiometry"].comment = "- Description: The stoichiometry of the probe labeling site, if known.\n- Type: float4"
    model.table("PDB", "ihm_poly_probe_conjugate").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_model_list").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_model_list").column_definitions["assembly_id"].comment = "- Description: A reference to table ihm_struct_assembly.id."
    model.table("PDB", "ihm_model_list").column_definitions["model_id"].comment = "- Description: A unique identifier for the structural model being deposited.\n- Type: int4"
    model.table("PDB", "ihm_model_list").column_definitions["model_name"].comment = "- Description: A decsriptive name for the model.\n- Examples: Best scoring model,2nd best scoring model,Cluster center\n- Type: text"
    model.table("PDB", "ihm_model_list").column_definitions["protocol_id"].comment = "- Description: A reference to table ihm_modeling_protocol.id."
    model.table("PDB", "ihm_model_list").column_definitions["representation_id"].comment = "- Description: A reference to table ihm_model_representation.id."
    model.table("PDB", "ihm_model_list").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_feature_list").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_feature_list").column_definitions["details"].comment = "- Description: Additional details regarding the feature.\n- Type: text"
    model.table("PDB", "ihm_feature_list").column_definitions["entity_type"].comment = "- Description: The type of entity.\n- Type: text"
    model.table("PDB", "ihm_feature_list").column_definitions["feature_id"].comment = "- Description: A unique identifier for the feature.\n- Type: int4"
    model.table("PDB", "ihm_feature_list").column_definitions["feature_type"].comment = "- Description: The type of feature.\n- Type: text"
    model.table("PDB", "ihm_feature_list").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "pdbx_entity_poly_na_type").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "pdbx_entity_poly_na_type").column_definitions["entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "pdbx_entity_poly_na_type").column_definitions["type"].comment = "- Description: This data item describes the nucleic acid type.\n- Type: text"
    model.table("PDB", "pdbx_entity_poly_na_type").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_ordered_ensemble").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_ordered_ensemble").column_definitions["edge_description"].comment = "- Description: Description of the edge.\n- Type: text"
    model.table("PDB", "ihm_ordered_ensemble").column_definitions["edge_id"].comment = "- Description: An identifier that describes an edge in a directed graph, which\n represents an ordered ensemble. \n Forms the category key together with _ihm_ordered_ensemble.process_id.\n- Type: int4"
    model.table("PDB", "ihm_ordered_ensemble").column_definitions["model_group_id_begin"].comment = "- Description: A reference to table ihm_model_group.id."
    model.table("PDB", "ihm_ordered_ensemble").column_definitions["model_group_id_end"].comment = "- Description: A reference to table ihm_model_group.id."
    model.table("PDB", "ihm_ordered_ensemble").column_definitions["ordered_by"].comment = "- Description: The parameter based on which the ordering is carried out.\n- Examples: time steps,steps in an assembly process,steps in a metabolic pathway,steps in an interaction pathway\n- Type: text"
    model.table("PDB", "ihm_ordered_ensemble").column_definitions["process_description"].comment = "- Description: Description of the ordered process.\n- Type: text"
    model.table("PDB", "ihm_ordered_ensemble").column_definitions["process_id"].comment = "- Description: An identifier for the ordered process. \n Forms the category key together with _ihm_ordered_ensemble.edge_id.\n- Type: int4"
    model.table("PDB", "ihm_ordered_ensemble").column_definitions["step_description"].comment = "- Description: Description of the step.\n- Type: text"
    model.table("PDB", "ihm_ordered_ensemble").column_definitions["step_id"].comment = "- Description: Identifier for a particular step in the ordered process.\n- Type: int4"
    model.table("PDB", "ihm_ordered_ensemble").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_geometric_object_list").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_geometric_object_list").column_definitions["object_description"].comment = "- Description: Brief description of the geometric object.\n- Examples: Half-torus representing the nuclear membrane\n- Type: text"
    model.table("PDB", "ihm_geometric_object_list").column_definitions["object_id"].comment = "- Description: A unique identifier for the geometric object.\n- Type: int4"
    model.table("PDB", "ihm_geometric_object_list").column_definitions["object_name"].comment = "- Description: User-provided name for the object.\n- Examples: Nuclear membrane\n- Type: text"
    model.table("PDB", "ihm_geometric_object_list").column_definitions["object_type"].comment = "- Description: The type of geomtric object.\n- Type: text"
    model.table("PDB", "ihm_geometric_object_list").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "pdbx_ion_info").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "pdbx_ion_info").column_definitions["id"].comment = "- Description: Serial number.\n- Examples: 1\n- Type: text"
    model.table("PDB", "pdbx_ion_info").column_definitions["name"].comment = "- Description: Name of ion.\n- Examples: MG\n- Type: text"
    model.table("PDB", "pdbx_ion_info").column_definitions["numb_per_asym_unit"].comment = "- Description: Number of ion molecules per asymmetric unit.\n- Examples: 1,2,3\n- Type: int4"
    model.table("PDB", "pdbx_ion_info").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_geometric_object_sphere").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_geometric_object_sphere").column_definitions["center_id"].comment = "- Description: A reference to table ihm_geometric_object_center.id."
    model.table("PDB", "ihm_geometric_object_sphere").column_definitions["object_id"].comment = "- Description: A reference to table ihm_geometric_object_list.object_id."
    model.table("PDB", "ihm_geometric_object_sphere").column_definitions["radius_r"].comment = "- Description: Radius \"r\" of the sphere.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_sphere").column_definitions["transformation_id"].comment = "- Description: A reference to table ihm_geometric_object_transformation.id."
    model.table("PDB", "ihm_geometric_object_sphere").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_poly_residue_feature").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["asym_id"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["comp_id_begin"].comment = "- Description: A reference to table entity_poly_seq.mon_id."
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["comp_id_end"].comment = "- Description: A reference to table entity_poly_seq.mon_id."
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["entity_id"].comment = "- Description: A reference to table entity_poly_seq.entity_id."
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["feature_id"].comment = "- Description: A reference to table ihm_feature_list.feature_id."
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["interface_residue_flag"].comment = "- Description: A flag to indicate if the feature is an interface residue, identified by experiments and\n therefore, used to build spatial restraints during modeling.\n- Type: text"
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["ordinal_id"].comment = "- Description: A unique identifier for the category.\n- Type: int4"
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["rep_atom"].comment = "- Description: If _ihm_poly_residue_feature.granularity is by-residue, then indicate the atom used to represent \n the residue in three-dimension. Default is the C-alpha atom.\n- Type: text"
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["residue_range_granularity"].comment = "- Description: The coarse-graining information, if the feature is a residue range.\n- Type: text"
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["seq_id_begin"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["seq_id_end"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_poly_residue_feature").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_related_datasets").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_related_datasets").column_definitions["dataset_list_id_derived"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_related_datasets").column_definitions["dataset_list_id_primary"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_related_datasets").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_dataset_group").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_dataset_group").column_definitions["application"].comment = "- Description: The application / utilization of the dataset group in modeling.\n- Type: text"
    model.table("PDB", "ihm_dataset_group").column_definitions["details"].comment = "- Description: Additional details regarding the dataset group.\n- Type: text"
    model.table("PDB", "ihm_dataset_group").column_definitions["id"].comment = "- Description: A unique identifier for the dataset group.\n- Type: int4"
    model.table("PDB", "ihm_dataset_group").column_definitions["name"].comment = "- Description: A name for the dataset group.\n- Type: text"
    model.table("PDB", "ihm_dataset_group").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_interface_residue_feature").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_interface_residue_feature").column_definitions["binding_partner_asym_id"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_interface_residue_feature").column_definitions["binding_partner_entity_id"].comment = "- Description: A reference to table entity.id."
    model.table("PDB", "ihm_interface_residue_feature").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_interface_residue_feature").column_definitions["details"].comment = "- Description: Additional details regarding the interface residue.\n- Type: text"
    model.table("PDB", "ihm_interface_residue_feature").column_definitions["feature_id"].comment = "- Description: A reference to table ihm_feature_list.feature_id."
    model.table("PDB", "ihm_interface_residue_feature").column_definitions["ordinal_id"].comment = "- Description: A unique identifier for the category.\n- Type: int4"
    model.table("PDB", "ihm_interface_residue_feature").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_dataset_list").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_dataset_list").column_definitions["data_type"].comment = "- Description: The type of data held in the dataset.\n- Type: text"
    model.table("PDB", "ihm_dataset_list").column_definitions["database_hosted"].comment = "- Description: A flag that indicates whether the dataset is archived in \n an IHM related database or elsewhere.\n- Type: text"
    model.table("PDB", "ihm_dataset_list").column_definitions["details"].comment = "- Description: Details regarding the dataset, especially those types not listed in\n _ihm_dataset_list.data_type.\n- Type: text"
    model.table("PDB", "ihm_dataset_list").column_definitions["id"].comment = "- Description: A unique identifier for the dataset.\n- Type: int4"
    model.table("PDB", "ihm_dataset_list").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_geometric_object_plane").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_geometric_object_plane").column_definitions["object_id"].comment = "- Description: A reference to table ihm_geometric_object_list.object_id."
    model.table("PDB", "ihm_geometric_object_plane").column_definitions["plane_type"].comment = "- Description: The type of plane.\n- Type: text"
    model.table("PDB", "ihm_geometric_object_plane").column_definitions["transformation_id"].comment = "- Description: A reference to table ihm_geometric_object_transformation.id."
    model.table("PDB", "ihm_geometric_object_plane").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["asym_id_1"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["asym_id_2"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["comp_id_1"].comment = "- Description: A reference to table entity_poly_seq.mon_id."
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["comp_id_2"].comment = "- Description: A reference to table entity_poly_seq.mon_id."
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["distance_lower_limit"].comment = "- Description: The lower limit to the distance threshold applied to this predicted contact restraint\n in the integrative modeling task.\n- Type: float4"
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["distance_upper_limit"].comment = "- Description: The upper limit to the distance threshold applied to this predicted contact restraint\n in the integrative modeling task.\n- Type: float4"
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["entity_description_1"].comment = "- Description: A text description of molecular entity 1. \n- Type: text"
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["entity_description_2"].comment = "- Description: A text description of molecular entity 2. \n- Type: text"
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["entity_id_1"].comment = "- Description: A reference to table entity_poly_seq.entity_id."
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["entity_id_2"].comment = "- Description: A reference to table entity_poly_seq.entity_id."
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["group_id"].comment = "- Description: An identifier to group the predicted contacts.\n- Type: int4"
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["id"].comment = "- Description: A unique identifier for the predicted contact restraint.\n- Type: int4"
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["model_granularity"].comment = "- Description: The granularity of the predicted contact as applied to the multi-scale model.\n- Type: text"
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["probability"].comment = "- Description: The real number that indicates the probability that the predicted distance restraint \n is correct. This number should fall between 0.0 and 1.0.\n- Type: float4"
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["rep_atom_1"].comment = "- Description: If _ihm_predicted_contact_restraint.model_granularity is by-residue, then indicate the atom \n used to represent the first monomer partner in three-dimension. Default is the C-alpha atom.\n- Type: text"
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["rep_atom_2"].comment = "- Description: If _ihm_predicted_contact_restraint.model_granularity is by-residue, then indicate the atom \n used to represent the second monomer partner in three-dimension. Default is the C-alpha atom.\n- Type: text"
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["restraint_type"].comment = "- Description: The type of distance restraint applied.\n- Type: text"
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["seq_id_1"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["seq_id_2"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["software_id"].comment = "- Description: A reference to table software.pdbx_ordinal."
    model.table("PDB", "ihm_predicted_contact_restraint").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_3dem_restraint").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_3dem_restraint").column_definitions["cross_correlation_coefficient"].comment = "- Description: The cross correlation coefficient corresponding to the model to map fitting.\n- Type: float4"
    model.table("PDB", "ihm_3dem_restraint").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_3dem_restraint").column_definitions["details"].comment = "- Description: Additional details regarding the model to map fitting.\n- Examples: The Nup-84 models generated and the 3DEM maps are converted to 3D Gaussians\n        using Gaussian mixture models (GMMs). The GMMs are then compared to obtain\n        a 3D fit of the map and the model.\n- Type: text"
    model.table("PDB", "ihm_3dem_restraint").column_definitions["fitting_method"].comment = "- Description: Method used to fit the model to the 3DEM map.\n- Examples: Gaussian mixture model,Local refinement,Flexible fitting,Other\n- Type: text"
    model.table("PDB", "ihm_3dem_restraint").column_definitions["fitting_method_citation_id"].comment = "- Description: A reference to table citation.id."
    model.table("PDB", "ihm_3dem_restraint").column_definitions["id"].comment = "- Description: A unique identifier for the 3DEM restraint description.\n- Type: int4"
    model.table("PDB", "ihm_3dem_restraint").column_definitions["map_segment_flag"].comment = "- Description: A flag that indicates whether or not the 3DEM map is segmented i.e.,\n whether the whole map is used or only a portion of it is used (by masking\n or by other means) as restraint in the modeling.\n- Type: text"
    model.table("PDB", "ihm_3dem_restraint").column_definitions["model_id"].comment = "- Description: A reference to table ihm_model_list.model_id."
    model.table("PDB", "ihm_3dem_restraint").column_definitions["number_of_gaussians"].comment = "- Description: In case of Gaussian mixture models, the number of gaussians\n is a parameter used to covert the 3DEM maps and models into\n GMMs. This captures the level of granularity used in\n representing the maps and/or models as 3D Gaussians.\n- Type: int4"
    model.table("PDB", "ihm_3dem_restraint").column_definitions["struct_assembly_id"].comment = "- Description: A reference to table ihm_struct_assembly.id."
    model.table("PDB", "ihm_3dem_restraint").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["distance_lower_limit"].comment = "- Description: The lower limit to the distance threshold applied to this distance restraint\n in the integrative modeling task.\n- Type: float4"
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["distance_lower_limit_esd"].comment = "- Description: The estimated standard deviation of the lower limit distance threshold applied to this distance restraint\n in the integrative modeling task.\n- Type: float4"
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["distance_upper_limit"].comment = "- Description: The upper limit to the distance threshold applied to this distance restraint\n in the integrative modeling task.\n- Type: float4"
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["distance_upper_limit_esd"].comment = "- Description: The estimated standard deviation of the upper limit distance threshold applied to this distance restraint\n in the integrative modeling task.\n- Type: float4"
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["feature_id_1"].comment = "- Description: A reference to table ihm_feature_list.feature_id."
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["feature_id_2"].comment = "- Description: A reference to table ihm_feature_list.feature_id."
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["group_conditionality"].comment = "- Description: If a group of atoms or residues are restrained, this data item defines \n the conditionality based on which the restraint is applied in the modeling.\n- Type: text"
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["group_id"].comment = "- Description: An identifier to group the distance restraints. \n This can be the same as the _ihm_derived_distance_restraint.id in case\n the some of the restraints are not grouped.\n- Type: int4"
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["id"].comment = "- Description: A unique identifier for the derived distance restraint.\n- Type: int4"
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["mic_value"].comment = "- Description: The value of the Maximal Information Co-efficient (MIC), if applicable. \n MIC values are correlation measures derived from the genetic profiles\n and are used to derive restraint information  from quantitative measurements \n of genetic interactions.\n- Type: float4"
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["probability"].comment = "- Description: The real number that indicates the probability that the distance restraint \n is correct. This number should fall between 0.0 and 1.0.\n- Type: float4"
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["random_exclusion_fraction"].comment = "- Description: The fraction of randomly excluded distance restraints during modeling. \n In HADDOCK, this is used along with ambiguous interface restraints (AIRs) \n to account for uncertainties in AIRs.\n- Type: float4"
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["restraint_type"].comment = "- Description: The type of distance restraint applied.\n- Type: text"
    model.table("PDB", "ihm_derived_distance_restraint").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_sas_restraint").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_sas_restraint").column_definitions["chi_value"].comment = "- Description: The chi value resulting from fitting the model to the SAS data.\n- Type: float4"
    model.table("PDB", "ihm_sas_restraint").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_sas_restraint").column_definitions["details"].comment = "- Description: Additional details regarding the SAS restraint used.\n- Type: text"
    model.table("PDB", "ihm_sas_restraint").column_definitions["fitting_atom_type"].comment = "- Description: The type of atoms in the model fit to the SAS data.\n- Examples: C-alpha atoms,Heavy atoms,All atoms\n- Type: text"
    model.table("PDB", "ihm_sas_restraint").column_definitions["fitting_method"].comment = "- Description: The method used for fitting the model to the SAS data.\n- Examples: DAMMIF,FoXS,MultiFoXS,Minimal Ensemble Search,Other\n- Type: text"
    model.table("PDB", "ihm_sas_restraint").column_definitions["fitting_state"].comment = "- Description: An indicator to single or multiple state fitting.\n- Type: text"
    model.table("PDB", "ihm_sas_restraint").column_definitions["id"].comment = "- Description: A unique identifier for the SAS restraint description.\n- Type: int4"
    model.table("PDB", "ihm_sas_restraint").column_definitions["model_id"].comment = "- Description: A reference to table ihm_model_list.model_id."
    model.table("PDB", "ihm_sas_restraint").column_definitions["profile_segment_flag"].comment = "- Description: A flag that indicates whether or not the SAS profile is segmented i.e.,\n whether the whole SAS profile is used or only a portion of it is used \n (by masking or by other means) as restraint in the modeling.\n- Type: text"
    model.table("PDB", "ihm_sas_restraint").column_definitions["radius_of_gyration"].comment = "- Description: Radius of gyration obtained from the SAS profile, if used as input restraint.\n- Type: float4"
    model.table("PDB", "ihm_sas_restraint").column_definitions["struct_assembly_id"].comment = "- Description: A reference to table ihm_struct_assembly.id."
    model.table("PDB", "ihm_sas_restraint").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["asym_id"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["comp_id"].comment = "- Description: A reference to table entity_poly_seq.mon_id"
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["entity_description"].comment = "- Description: A text description of the molecular entity. \n- Type: text"
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["entity_id"].comment = "- Description: A reference to table entity_poly_seq.entity_id"
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["fp_rate"].comment = "- Description: The footprinting rate.\n- Type: float4"
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["fp_rate_error"].comment = "- Description: The footprinting rate error.\n- Type: float4"
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["group_id"].comment = "- Description: An identifier to group the hydroxyl radical footprinting restraints.\n- Type: int4"
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["id"].comment = "- Description: A unique identifier for the hydroxyl radical footprinting restraint.\n- Type: int4"
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["log_pf"].comment = "- Description: Log (base 10) protection factor.\n- Type: float4"
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["log_pf_error"].comment = "- Description: Error of Log (base 10) protection factor.\n- Type: float4"
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["predicted_sasa"].comment = "- Description: The predicted solvent accessible surface area.\n- Type: float4"
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["seq_id"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["software_id"].comment = "- Description: A reference to table software.pdbx_ordinal."
    model.table("PDB", "ihm_hydroxyl_radical_fp_restraint").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["dataset_list_id"].comment = "- Description: A reference to table ihm_dataset_list.id."
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["details"].comment = "- Description: Additional details about the geometric object distance restraints, \n especially if _ihm_geometric_object_distance_restraint.restraint_type or\n _ihm_geometric_object_distance_restraint.object_characteristic is \"other\".\n- Type: text"
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["distance_lower_limit"].comment = "- Description: The lower limit to the distance threshold, if applicable.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["distance_lower_limit_esd"].comment = "- Description: The estimated standard deviation of the lower limit distance threshold, if applicable.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["distance_probability"].comment = "- Description: The real number that indicates the probability that the distance restraint\n is correct. This number should fall between 0.0 and 1.0.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["distance_upper_limit"].comment = "- Description: The upper limit to the distance threshold, if applicable.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["distance_upper_limit_esd"].comment = "- Description: The estimated standard deviation of the upper limit distance threshold, if applicable.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["feature_id"].comment = "- Description: A reference to table ihm_feature_list.feature_id."
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["group_conditionality"].comment = "- Description: If a group of atoms or residues are restrained, this data item defines\n the conditionality based on which the restraint is applied in the modeling.\n- Type: text"
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["harmonic_force_constant"].comment = "- Description: The harmonic force constant, if applicable.\n- Type: float4"
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["id"].comment = "- Description: A unique id for the geometric object distance restraint.\n- Type: int4"
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["object_characteristic"].comment = "- Description: The characteristic of the geometric object used in the restraint.\n- Type: text"
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["object_id"].comment = "- Description: A reference to table ihm_geometric_object_list.object_id."
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["restraint_type"].comment = "- Description: The type of restraint applied.\n- Type: text"
    model.table("PDB", "ihm_geometric_object_distance_restraint").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_external_files").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_external_files").column_definitions["content_type"].comment = "- Description: The type of content in the file.\n- Type: text"
    model.table("PDB", "ihm_external_files").column_definitions["details"].comment = "- Description: Additional textual details regarding the external file.\n- Examples: Readme file,Nup84 multiple sequence alignment file,Nup84 starting comparative model file\n- Type: text"
    model.table("PDB", "ihm_external_files").column_definitions["file_format"].comment = "- Description: Format of the external file.\n- Type: text"
    model.table("PDB", "ihm_external_files").column_definitions["file_path"].comment = "- Description: The relative path (including filename) for each external file. \n Absolute paths (starting with \"/\") are not permitted. \n This is required for identifying individual files from within\n a tar-zipped archive file or for identifying supplementary local\n files organized within a directory structure.\n This data item assumes a POSIX-like directory structure or file path.\n- Examples: integrativemodeling-nup84-a69f895/outputs/localization/cluster1/nup84.mrc,integrativemodeling-nup84-a69f895/scripts/MODELLER_scripts/Nup84/all_align_final2.ali,nup145.mrc,data/EDC_XL_122013.dat\n- Type: text"
    model.table("PDB", "ihm_external_files").column_definitions["file_size_bytes"].comment = "- Description: Storage size of the external file in bytes.\n- Type: float4"
    model.table("PDB", "ihm_external_files").column_definitions["id"].comment = "- Description: A unique identifier for each external file.\n- Type: int4"
    model.table("PDB", "ihm_external_files").column_definitions["reference_id"].comment = "- Description: A reference to table ihm_external_reference_info.reference_id."
    model.table("PDB", "ihm_external_files").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_external_reference_info").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_external_reference_info").column_definitions["associated_url"].comment = "- Description: The Uniform Resource Locator (URL) corresponding to the external reference (DOI). \n This URL should link to the corresponding downloadable file or archive and is provided \n to enable automated software to download the referenced file or archive.\n- Type: text"
    model.table("PDB", "ihm_external_reference_info").column_definitions["details"].comment = "- Description: Additional details regarding the external reference.\n- Type: text"
    model.table("PDB", "ihm_external_reference_info").column_definitions["reference"].comment = "- Description: The external reference or the Digital Object Identifier (DOI).\n This field is not relevant for local files.\n- Examples: 10.5281/zenodo.46266\n- Type: text"
    model.table("PDB", "ihm_external_reference_info").column_definitions["reference_id"].comment = "- Description: A unique identifier for the external reference.\n- Type: int4"
    model.table("PDB", "ihm_external_reference_info").column_definitions["reference_provider"].comment = "- Description: The name of the reference provider.\n- Examples: Zenodo,Figshare,Crossref\n- Type: text"
    model.table("PDB", "ihm_external_reference_info").column_definitions["reference_type"].comment = "- Description: The type of external reference. \n Currently, only Digital Object Identifiers (DOIs) and supplementary files \n stored locally are supported.\n- Type: text"
    model.table("PDB", "ihm_external_reference_info").column_definitions["refers_to"].comment = "- Description: The type of object that the external reference points to, usually\n a single file or an archive.\n- Type: text"
    model.table("PDB", "ihm_external_reference_info").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "ihm_residues_not_modeled").column_definitions["structure_id"].comment = "- Description: A reference to table entry.id."
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["asym_id"].comment = "- Description: A reference to table struct_asym.id."
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["comp_id_begin"].comment = "- Description: A reference to table entity_poly_seq.mon_id."
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["comp_id_end"].comment = "- Description: A reference to table entity_poly_seq.mon_id."
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["details"].comment = "- Description: Additional details regarding the missing segments.\n- Type: text"
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["entity_description"].comment = "- Description: A text description of the molecular entity, whose residues are not modeled. \n This data item is a pointer to _entity.pdbx_description in the ENTITY category.\n- Type: text"
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["entity_id"].comment = "- Description: A reference to table entity_poly_seq.entity_id."
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["id"].comment = "- Description: A unique identifier for the category.\n- Type: int4"
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["model_id"].comment = "- Description: A reference to table ihm_model_list.model_id."
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["reason"].comment = "- Description: The reason why the residues are missing in the structural model.\n- Type: text"
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["seq_id_begin"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["seq_id_end"].comment = "- Description: A reference to table entity_poly_seq.num."
    model.table("PDB", "ihm_residues_not_modeled").column_definitions["Owner"].comment = "- Description: Group that can update the record."

    model.table("PDB", "Entry_Related_File_Templates").column_definitions["Description"].comment = "- Description: None"
    model.table("PDB", "Entry_Related_File_Templates").column_definitions["Owner"].comment = "- Description: Group that can update the record."

# ===================================================
# -- this function will be called from the update_schemas.py file

def set_comments(model):
    table_comments(model)
    column_comments(model)


# ===================================================    
def main(server_name, catalog_id, credentials):
    server = DerivaServer('https', server_name, credentials)
    catalog = server.connect_ermrest(catalog_id)
    catalog.dcctx['cid'] = "oneoff/model"
    model = catalog.getCatalogModel()

    set_comments(model)

    # let's the library deals with applying the difference
    model.apply()

# ===================================================    

if __name__ == '__main__':
    args = BaseCLI("ad-hoc table creation tool", None, 1).parse_cli()
    credentials = get_credential(args.host, args.credential_file)
#    if args.catalog is None:
#        catalog_id = 99

    main(args.host, 99, credentials)
    
    
